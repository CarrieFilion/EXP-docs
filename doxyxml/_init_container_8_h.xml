<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="_init_container_8_h" kind="file" language="C++">
    <compoundname>InitContainer.H</compoundname>
    <includes local="no">map</includes>
    <incdepgraph>
      <node id="1">
        <label>/home/weinberg/Projects/EXP/include/InitContainer.H</label>
        <link refid="_init_container_8_h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>map</label>
      </node>
    </incdepgraph>
    <innerclass refid="class_icont" prot="public">Icont</innerclass>
    <sectiondef kind="func">
      <memberdef kind="function" id="_init_container_8_h_1aa4c383fcb52894c09bd68fcf8baa8bb5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>template&lt; class, class, class... &gt; class</type>
            <declname>C</declname>
            <defname>C</defname>
          </param>
          <param>
            <type>typename K</type>
          </param>
          <param>
            <type>typename V</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>V &amp;</type>
        <definition>V &amp; GetWithDef</definition>
        <argsstring>(C&lt; K, V, Args... &gt; &amp;m, K const &amp;key, const V &amp;defval)</argsstring>
        <name>GetWithDef</name>
        <param>
          <type>C&lt; K, V, Args... &gt; &amp;</type>
          <declname>m</declname>
        </param>
        <param>
          <type>K const &amp;</type>
          <declname>key</declname>
        </param>
        <param>
          <type>const V &amp;</type>
          <declname>defval</declname>
        </param>
        <briefdescription>
<para>Non-invasive, assignable, lvalue return. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/InitContainer.H" line="35" column="3" bodyfile="/home/weinberg/Projects/EXP/include/InitContainer.H" bodystart="35" bodyend="40"/>
      </memberdef>
      <memberdef kind="function" id="_init_container_8_h_1a9401365b5683750c84dacd81b97b54bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>template&lt; class, class, class... &gt; class</type>
            <declname>C</declname>
            <defname>C</defname>
          </param>
          <param>
            <type>typename K</type>
          </param>
          <param>
            <type>typename V</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>V</type>
        <definition>V GetWithDef</definition>
        <argsstring>(const C&lt; K, V, Args... &gt; &amp;m, K const &amp;key, const V &amp;defval)</argsstring>
        <name>GetWithDef</name>
        <param>
          <type>const C&lt; K, V, Args... &gt; &amp;</type>
          <declname>m</declname>
        </param>
        <param>
          <type>K const &amp;</type>
          <declname>key</declname>
        </param>
        <param>
          <type>const V &amp;</type>
          <declname>defval</declname>
        </param>
        <briefdescription>
<para>Non-invasive, constant rvalue return. </para>
        </briefdescription>
        <detaileddescription>
<para>Wrapper template for STL containers for initializing value for new key.</para>
<para>GetWithDef returns a value and MapWithDef returns the container.</para>
<para>The <ref refid="class_icont" kindref="compound">Icont</ref> class derives a helper class using the STL container as a base class. This version seems the cleanest but may have slightly more overhead.</para>
<para>This version is updated for C++11 variadic arguments. Should work for generic associative containers including the optional comparator and allocator parameters. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/InitContainer.H" line="25" column="3" bodyfile="/home/weinberg/Projects/EXP/include/InitContainer.H" bodystart="25" bodyend="30"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#ifndef<sp/>_InitContainer_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_InitContainer_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;map&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"></codeline>
<codeline lineno="23"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;<sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal">,</highlight><highlight class="keyword">class</highlight><highlight class="normal">,</highlight><highlight class="keyword">class</highlight><highlight class="normal">...&gt;</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">C,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>K,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>V,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args<sp/>&gt;</highlight></codeline>
<codeline lineno="25" refid="_init_container_8_h_1a9401365b5683750c84dacd81b97b54bc" refkind="member"><highlight class="normal">V<sp/><ref refid="_init_container_8_h_1a9401365b5683750c84dacd81b97b54bc" kindref="member">GetWithDef</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>C&lt;K,V,Args...&gt;&amp;<sp/>m,<sp/>K<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>key,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>V<sp/>&amp;<sp/>defval)</highlight></codeline>
<codeline lineno="26"><highlight class="normal">{</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>C&lt;K,V,Args...&gt;::const_iterator<sp/>it<sp/>=<sp/>m.find(<sp/>key<sp/>);</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it<sp/>==<sp/>m.end())<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>defval;</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>it-&gt;second;</highlight></codeline>
<codeline lineno="30"><highlight class="normal">}</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;<sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal">,</highlight><highlight class="keyword">class</highlight><highlight class="normal">,</highlight><highlight class="keyword">class</highlight><highlight class="normal">...&gt;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">C,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>K,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>V,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args<sp/>&gt;</highlight></codeline>
<codeline lineno="35" refid="_init_container_8_h_1aa4c383fcb52894c09bd68fcf8baa8bb5" refkind="member"><highlight class="normal">V&amp;<sp/><ref refid="_init_container_8_h_1a9401365b5683750c84dacd81b97b54bc" kindref="member">GetWithDef</ref>(C&lt;K,V,Args...&gt;&amp;<sp/>m,<sp/>K<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>key,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>V<sp/>&amp;<sp/>defval)</highlight></codeline>
<codeline lineno="36"><highlight class="normal">{</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>C&lt;K,V,Args...&gt;::iterator<sp/>it<sp/>=<sp/>m.find(<sp/>key<sp/>);</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it<sp/>==<sp/>m.end())<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(m[key]<sp/>=<sp/>defval);</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>it-&gt;second;</highlight></codeline>
<codeline lineno="40"><highlight class="normal">}</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;<sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal">,</highlight><highlight class="keyword">class</highlight><highlight class="normal">,</highlight><highlight class="keyword">class</highlight><highlight class="normal">...&gt;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">C,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>K,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>V,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args<sp/>&gt;</highlight></codeline>
<codeline lineno="46" refid="class_icont" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_icont" kindref="compound">Icont</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>C&lt;K,<sp/>V,<sp/>Args...&gt;</highlight></codeline>
<codeline lineno="47"><highlight class="normal">{</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="52" refid="class_icont_1a95419daaf624c5690c7e6383b17a81bb" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>V<sp/><ref refid="class_icont_1a95419daaf624c5690c7e6383b17a81bb" kindref="member">Default</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="55" refid="class_icont_1a65ba76160892e686d56ca9c5d005607a" refkind="member"><highlight class="normal"><sp/><sp/>V&amp;<sp/><ref refid="class_icont_1a65ba76160892e686d56ca9c5d005607a" kindref="member">operator[]</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>K&amp;<sp/>key)</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>std::map&lt;K,<sp/>V,<sp/>Args...&gt;*<sp/>p<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">std::map&lt;K,V,<sp/>Args...</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">*&gt;(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::map&lt;K,<sp/>V&gt;::iterator<sp/>it<sp/>=<sp/>p-&gt;find(key);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it<sp/>==<sp/>p-&gt;end())<sp/>{</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::pair&lt;const<sp/>K,<sp/>V&gt;<sp/>value(key,<sp/><ref refid="class_icont_1a95419daaf624c5690c7e6383b17a81bb" kindref="member">Default</ref>());</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>it<sp/>=<sp/>p-&gt;insert(value).first;<sp/></highlight><highlight class="comment">//<sp/>Insert<sp/>and<sp/>return<sp/>new<sp/>iterator</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>it-&gt;second;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="65"><highlight class="normal">};</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="/home/weinberg/Projects/EXP/include/InitContainer.H"/>
  </compounddef>
</doxygen>
