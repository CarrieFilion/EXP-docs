<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="_iterable_8_h" kind="file" language="C++">
    <compoundname>Iterable.H</compoundname>
    <includes local="no">iterator</includes>
    <includes local="no">cstddef</includes>
    <incdepgraph>
      <node id="1">
        <label>/home/weinberg/Projects/EXP/include/Iterable.H</label>
        <link refid="_iterable_8_h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>cstddef</label>
      </node>
      <node id="2">
        <label>iterator</label>
      </node>
    </incdepgraph>
    <innerclass refid="class_iterable" prot="public">Iterable</innerclass>
    <innerclass refid="struct_iterator" prot="public">Iterator</innerclass>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#ifndef<sp/>Iterable_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Iterable_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iterator&gt;</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>For<sp/>std::forward_iterator_tag</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstddef&gt;</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>For<sp/>std::ptrdiff_t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="8" refid="struct_iterator" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_iterator" kindref="compound">Iterator</ref><sp/></highlight></codeline>
<codeline lineno="9"><highlight class="normal">{</highlight></codeline>
<codeline lineno="10" refid="struct_iterator_1acdd10e3cfe71d270663c73685c1b0791" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="struct_iterator_1acdd10e3cfe71d270663c73685c1b0791" kindref="member">iterator_category</ref><sp/>=<sp/>std::forward_iterator_tag;</highlight></codeline>
<codeline lineno="11" refid="struct_iterator_1a397e0a4d87f933bbfd566a3368aca34c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="struct_iterator_1a397e0a4d87f933bbfd566a3368aca34c" kindref="member">difference_type</ref><sp/><sp/><sp/>=<sp/>std::ptrdiff_t;</highlight></codeline>
<codeline lineno="12" refid="struct_iterator_1ab30ee4ae468e806a7897d6a0c7705c54" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="struct_iterator_1ab30ee4ae468e806a7897d6a0c7705c54" kindref="member">value_type</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>T;</highlight></codeline>
<codeline lineno="13" refid="struct_iterator_1a37c4732ae0b73e9fdc3a585c01750d05" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="struct_iterator_1a37c4732ae0b73e9fdc3a585c01750d05" kindref="member">pointer</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>T*;<sp/><sp/></highlight><highlight class="comment">//<sp/>or<sp/>also<sp/>value_type*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14" refid="struct_iterator_1a104c7f213cd33d599aa25277176529d5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="struct_iterator_1a104c7f213cd33d599aa25277176529d5" kindref="member">reference</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>T&amp;;<sp/><sp/></highlight><highlight class="comment">//<sp/>or<sp/>also<sp/>value_type&amp;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal">};</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="19" refid="class_iterable" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_iterable" kindref="compound">Iterable</ref>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="struct_iterator" kindref="compound">Iterator</ref>&lt;T&gt;</highlight></codeline>
<codeline lineno="20"><highlight class="normal">{</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="22" refid="class_iterable_1a1ba485e8dba76e792d973a9a23eac8d1" refkind="member"><highlight class="normal"><sp/><sp/>T*<sp/><ref refid="class_iterable_1a1ba485e8dba76e792d973a9a23eac8d1" kindref="member">ptr</ref>;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="24" refid="class_iterable_1a8ff8a2db20db0c23274bfbb2ce925c90" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="class_iterable_1a8ff8a2db20db0c23274bfbb2ce925c90" kindref="member">Iterable</ref>(T*<sp/>_ptr)<sp/>:<sp/><ref refid="class_iterable_1a1ba485e8dba76e792d973a9a23eac8d1" kindref="member">ptr</ref>(_ptr)<sp/>{}</highlight></codeline>
<codeline lineno="25" refid="class_iterable_1a9cdbe54599a872dc80729ba43a44ed9e" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_iterable" kindref="compound">Iterable</ref>&amp;<sp/><ref refid="class_iterable_1a9cdbe54599a872dc80729ba43a44ed9e" kindref="member">operator++</ref>()<sp/>{<ref refid="class_iterable_1a1ba485e8dba76e792d973a9a23eac8d1" kindref="member">ptr</ref>++;<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;}</highlight></codeline>
<codeline lineno="26" refid="class_iterable_1a5c1337488f0d3b5416346bff39c0a54a" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_iterable" kindref="compound">Iterable</ref><sp/><ref refid="class_iterable_1a5c1337488f0d3b5416346bff39c0a54a" kindref="member">operator++</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>{<ref refid="class_iterable" kindref="compound">Iterable</ref><sp/>retval<sp/>=<sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;<sp/>++(*this);<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>retval;}</highlight></codeline>
<codeline lineno="27" refid="class_iterable_1a0e9c879856f31f4e866b97141f386109" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_iterable_1a0e9c879856f31f4e866b97141f386109" kindref="member">operator==</ref>(<ref refid="class_iterable" kindref="compound">Iterable</ref><sp/>other)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_iterable_1a1ba485e8dba76e792d973a9a23eac8d1" kindref="member">ptr</ref><sp/>==<sp/>other.<ref refid="class_iterable_1a1ba485e8dba76e792d973a9a23eac8d1" kindref="member">ptr</ref>;}</highlight></codeline>
<codeline lineno="28" refid="class_iterable_1a88dcd5e0508fdf2db02c3a5a6b0733dd" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_iterable_1a88dcd5e0508fdf2db02c3a5a6b0733dd" kindref="member">operator!=</ref>(<ref refid="class_iterable" kindref="compound">Iterable</ref><sp/>other)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!(*</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>==<sp/>other);}</highlight></codeline>
<codeline lineno="29" refid="class_iterable_1a0b1241dd5184b102952ba0f70bf928df" refkind="member"><highlight class="normal"><sp/><sp/>T*<sp/><ref refid="class_iterable_1a0b1241dd5184b102952ba0f70bf928df" kindref="member">operator*</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_iterable_1a1ba485e8dba76e792d973a9a23eac8d1" kindref="member">ptr</ref>;}</highlight></codeline>
<codeline lineno="30"><highlight class="normal">};</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="/home/weinberg/Projects/EXP/include/Iterable.H"/>
  </compounddef>
</doxygen>
