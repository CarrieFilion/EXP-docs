<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="_spline_8_h" kind="file" language="C++">
    <compoundname>Spline.H</compoundname>
    <includes local="no">cstdlib</includes>
    <includes local="no">vector</includes>
    <includes local="no">cmath</includes>
    <incdepgraph>
      <node id="1">
        <label>/home/weinberg/Projects/EXP/include/Spline.H</label>
        <link refid="_spline_8_h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>cmath</label>
      </node>
      <node id="2">
        <label>cstdlib</label>
      </node>
      <node id="3">
        <label>vector</label>
      </node>
    </incdepgraph>
    <sectiondef kind="func">
      <memberdef kind="function" id="_spline_8_h_1a91e5251349db5d2dac0d48337128a8d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Spline</definition>
        <argsstring>(const std::vector&lt; T &gt; &amp;x, const std::vector&lt; T &gt; &amp;y, T yp1, T ypn, std::vector&lt; T &gt; &amp;y2)</argsstring>
        <name>Spline</name>
        <param>
          <type>const std::vector&lt; T &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const std::vector&lt; T &gt; &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type>T</type>
          <declname>yp1</declname>
        </param>
        <param>
          <type>T</type>
          <declname>ypn</declname>
        </param>
        <param>
          <type>std::vector&lt; T &gt; &amp;</type>
          <declname>y2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/Spline.H" line="56" column="6" bodyfile="/home/weinberg/Projects/EXP/include/Spline.H" bodystart="56" bodyend="115"/>
      </memberdef>
      <memberdef kind="function" id="_spline_8_h_1adbd53b003c4b24e45adb7299ac0d3c30" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Splint1</definition>
        <argsstring>(const std::vector&lt; T &gt; &amp;xa, const std::vector&lt; T &gt; &amp;ya, const std::vector&lt; T &gt; &amp;y2a, T x, T &amp;y, int even=0)</argsstring>
        <name>Splint1</name>
        <param>
          <type>const std::vector&lt; T &gt; &amp;</type>
          <declname>xa</declname>
        </param>
        <param>
          <type>const std::vector&lt; T &gt; &amp;</type>
          <declname>ya</declname>
        </param>
        <param>
          <type>const std::vector&lt; T &gt; &amp;</type>
          <declname>y2a</declname>
        </param>
        <param>
          <type>T</type>
          <declname>x</declname>
        </param>
        <param>
          <type>T &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type>int</type>
          <declname>even</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/Spline.H" line="120" column="6" bodyfile="/home/weinberg/Projects/EXP/include/Spline.H" bodystart="120" bodyend="154"/>
      </memberdef>
      <memberdef kind="function" id="_spline_8_h_1a81e72d393dea03979d6a7a749193e57e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Splint2</definition>
        <argsstring>(const std::vector&lt; T &gt; &amp;xa, const std::vector&lt; T &gt; &amp;ya, const std::vector&lt; T &gt; &amp;y2a, T x, T &amp;y, T &amp;dy, int even=0)</argsstring>
        <name>Splint2</name>
        <param>
          <type>const std::vector&lt; T &gt; &amp;</type>
          <declname>xa</declname>
        </param>
        <param>
          <type>const std::vector&lt; T &gt; &amp;</type>
          <declname>ya</declname>
        </param>
        <param>
          <type>const std::vector&lt; T &gt; &amp;</type>
          <declname>y2a</declname>
        </param>
        <param>
          <type>T</type>
          <declname>x</declname>
        </param>
        <param>
          <type>T &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type>T &amp;</type>
          <declname>dy</declname>
        </param>
        <param>
          <type>int</type>
          <declname>even</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/Spline.H" line="157" column="6" bodyfile="/home/weinberg/Projects/EXP/include/Spline.H" bodystart="157" bodyend="194"/>
      </memberdef>
      <memberdef kind="function" id="_spline_8_h_1a949a57250e3ed2816616d628068c0864" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Splint3</definition>
        <argsstring>(const std::vector&lt; T &gt; &amp;xa, const std::vector&lt; T &gt; &amp;ya, const std::vector&lt; T &gt; &amp;y2a, T x, T &amp;y, T &amp;dy, T &amp;ddy, int even=0)</argsstring>
        <name>Splint3</name>
        <param>
          <type>const std::vector&lt; T &gt; &amp;</type>
          <declname>xa</declname>
        </param>
        <param>
          <type>const std::vector&lt; T &gt; &amp;</type>
          <declname>ya</declname>
        </param>
        <param>
          <type>const std::vector&lt; T &gt; &amp;</type>
          <declname>y2a</declname>
        </param>
        <param>
          <type>T</type>
          <declname>x</declname>
        </param>
        <param>
          <type>T &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type>T &amp;</type>
          <declname>dy</declname>
        </param>
        <param>
          <type>T &amp;</type>
          <declname>ddy</declname>
        </param>
        <param>
          <type>int</type>
          <declname>even</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/Spline.H" line="198" column="6" bodyfile="/home/weinberg/Projects/EXP/include/Spline.H" bodystart="198" bodyend="235"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*****************************************************************************</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/><sp/>Description:</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/><sp/>-----------</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/><sp/>This<sp/>routine<sp/>finds<sp/>the<sp/>cubic<sp/>spline<sp/>coefficients.<sp/><sp/>The<sp/>boundary<sp/>condi-</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/><sp/>tions<sp/>may<sp/>be<sp/>one<sp/>of<sp/>the<sp/>following<sp/>three:</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>1)<sp/>&quot;natural,&quot;<sp/>that<sp/>is,<sp/>zero<sp/>second<sp/>derivatives</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>2)<sp/>first<sp/>derivatives<sp/>specified</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>3)<sp/>third<sp/>derivatives<sp/>computed<sp/>from<sp/>supplied<sp/>data</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/><sp/>Call<sp/>sequence:</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/><sp/>-------------</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/><sp/>void<sp/>spline(x,y,n,yp1,ypn,y2);</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/><sp/>int<sp/>n;</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/><sp/>double<sp/>x[n],y[n],yp1,ypn,y2[n];</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/><sp/>Parameters:</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/><sp/>----------</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/><sp/>n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>number<sp/>of<sp/>supplied<sp/>grid<sp/>points</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/><sp/>x<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>abcissa<sp/>array</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/><sp/>y<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ordinate<sp/>array</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/><sp/>yp1<sp/><sp/><sp/><sp/><sp/><sp/>boundary<sp/>condition<sp/>at<sp/>j=1</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/><sp/>ypn<sp/><sp/><sp/><sp/><sp/><sp/>boundary<sp/>condition<sp/>at<sp/>j=n</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*<sp/><sp/>y2<sp/><sp/><sp/><sp/><sp/><sp/><sp/>array<sp/>to<sp/>contain<sp/>spline<sp/>coefficients</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>*<sp/><sp/>Returns:</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*<sp/><sp/>-------</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/>*<sp/><sp/>None,<sp/>spline<sp/>coefficients<sp/>returned<sp/>by<sp/>pointer</highlight></codeline>
<codeline lineno="33"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="34"><highlight class="comment"><sp/>*<sp/><sp/>Notes:</highlight></codeline>
<codeline lineno="35"><highlight class="comment"><sp/>*<sp/><sp/>-----</highlight></codeline>
<codeline lineno="36"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="37"><highlight class="comment"><sp/>*<sp/><sp/>If<sp/><sp/><sp/><sp/><sp/>yp1,yp2<sp/>&gt;<sp/><sp/>1.0e30<sp/><sp/>boundary<sp/>conditions<sp/>(1)<sp/>natural<sp/>splines<sp/>are<sp/>used</highlight></codeline>
<codeline lineno="38"><highlight class="comment"><sp/>*<sp/><sp/>If<sp/><sp/><sp/><sp/><sp/>yp1,yp2<sp/>&lt;<sp/>-1.0e30<sp/><sp/>boundary<sp/>conditions<sp/>(3)<sp/>approx.<sp/>3rd<sp/>derivs<sp/>used</highlight></codeline>
<codeline lineno="39"><highlight class="comment"><sp/>*<sp/><sp/>Otherwise<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boundary<sp/>conditions<sp/>(2)<sp/>explicit<sp/>2nd<sp/>derivs<sp/>used</highlight></codeline>
<codeline lineno="40"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="41"><highlight class="comment"><sp/>*<sp/><sp/>By:</highlight></codeline>
<codeline lineno="42"><highlight class="comment"><sp/>*<sp/><sp/>--</highlight></codeline>
<codeline lineno="43"><highlight class="comment"><sp/>*<sp/><sp/>Adopted<sp/>from<sp/>Numerical<sp/>Recipes,<sp/>Press<sp/>et<sp/>al.</highlight></codeline>
<codeline lineno="44"><highlight class="comment"><sp/>*<sp/><sp/>Third<sp/>deriv.<sp/>boundary<sp/>condition<sp/>---<sp/><sp/>MDW<sp/>11/13/88</highlight></codeline>
<codeline lineno="45"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="46"><highlight class="comment"><sp/>***************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>Spline_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Spline_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstdlib&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cmath&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="56" refid="_spline_8_h_1a91e5251349db5d2dac0d48337128a8d0" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_spline_8_h_1a91e5251349db5d2dac0d48337128a8d0" kindref="member">Spline</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;T&gt;<sp/>&amp;x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;T&gt;<sp/>&amp;y,<sp/>T<sp/>yp1,<sp/>T<sp/>ypn,<sp/></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;T&gt;<sp/>&amp;y2)</highlight></codeline>
<codeline lineno="58"><highlight class="normal">{</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,k,i1,i2;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/>T<sp/>d1,d2,p,qn,un;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/>T<sp/>sig;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/>i1<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/>i2<sp/>=<sp/>x.size()<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/>std::vector&lt;T&gt;<sp/>u(i2);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/>y2.erase(y2.begin(),<sp/>y2.end());</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/>y2<sp/>=<sp/>std::vector&lt;T&gt;(i2);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>Boundary<sp/>conditions<sp/>obtained<sp/>by<sp/>fixing<sp/>third<sp/>derivative<sp/>as<sp/>computed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>by<sp/>divided<sp/>differences</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(yp1<sp/>&lt;<sp/>-0.99e30)<sp/>{</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>y2[i1+0]<sp/>=<sp/>1.0;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/>d2<sp/><sp/>=<sp/><sp/>((y[i1+3]-y[i1+2])/(x[i1+3]-x[i1+2])<sp/>-<sp/>(y[i1+2]-y[i1+1])/(x[i1+2]-x[i1+1]))/(x[i1+3]-x[i1+1]);</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/>d1<sp/><sp/>=<sp/><sp/>((y[i1+2]-y[i1+1])/(x[i1+2]-x[i1+1])<sp/>-<sp/>(y[i1+1]-y[i1+0])/(x[i1+1]-x[i1+0]))/(x[i1+2]-x[i1+0]);</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>u[i1+0]<sp/>=<sp/>-6.0*(d2-d1)*(x[i1+1]-x[i1+0])/(x[i1+3]-x[i1+0]);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>&quot;Normal&quot;<sp/>zero<sp/>second<sp/>derivative<sp/>boundary<sp/>conditions<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(yp1<sp/>&gt;<sp/>0.99e30)</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/>y2[i1+0]<sp/>=<sp/>u[i1+0]<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>Known<sp/>first<sp/>derivative<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>y2[i1+0]<sp/>=<sp/>-0.5;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/>u[i1+0]<sp/>=<sp/>(3.0/(x[i1+1]-x[i1+0]))*((y[i1+1]-y[i1+0])/(x[i1+1]-x[i1+0])-yp1);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=i1+1;i&lt;i2;i++)<sp/>{</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/>sig<sp/>=<sp/>(x[i]-x[i-1])/(x[i+1]-x[i-1]);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/>p<sp/>=<sp/>sig*y2[i-1]+2.0;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/>y2[i]<sp/>=<sp/>(sig-1.0)/p;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>u[i]<sp/>=<sp/>(y[i+1]-y[i])/(x[i+1]-x[i])<sp/>-<sp/>(y[i]-y[i-1])/(x[i]-x[i-1]);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/>u[i]<sp/>=<sp/>(6.0*u[i]/(x[i+1]-x[i-1])-sig*u[i-1])/p;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>Boundary<sp/>conditions<sp/>obtained<sp/>by<sp/>fixing<sp/>third<sp/>derivative<sp/>as<sp/>computed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>by<sp/>divided<sp/>differences</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ypn<sp/>&lt;<sp/>-0.99e30)<sp/>{</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/>d2<sp/>=<sp/>((y[i2]-y[i2-1])/(x[i2]-x[i2-1])<sp/>-<sp/></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(y[i2-1]-y[i2-2])/(x[i2-1]-x[i2-2]))/(x[i2]-x[i2-2]);</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>d1<sp/>=<sp/>((y[i2-1]-y[i2-2])/(x[i2-1]-x[i2-2])<sp/>-<sp/></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(y[i2-2]-y[i2-3])/(x[i2-2]-x[i2-3]))/(x[i2-1]-x[i2-3]);</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>qn<sp/>=<sp/>-1.0;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>un<sp/>=<sp/>6.0*(d2-d1)*(x[i2]-x[i2-1])/(x[i2]-x[i2-3]);</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>&quot;Normal&quot;<sp/>zero<sp/>second<sp/>derivative<sp/>boundary<sp/>conditions<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ypn<sp/>&gt;<sp/>0.99e30)</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/>qn<sp/>=<sp/>un<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>Known<sp/>first<sp/>derivative<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>qn<sp/>=<sp/>0.5;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/>un<sp/>=<sp/>(3.0/(x[i2]-x[i2-1]))*(ypn-(y[i2]-y[i2-1])/(x[i2]-x[i2-1]));</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/>y2[i2]<sp/>=<sp/>(un-qn*u[i2-1])/(qn*y2[i2-1]+1.0);</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(k=i2-1;k&gt;=i1;k--)</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/>y2[k]<sp/>=<sp/>y2[k]*y2[k+1]+u[k];</highlight></codeline>
<codeline lineno="115"><highlight class="normal">}</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="120" refid="_spline_8_h_1adbd53b003c4b24e45adb7299ac0d3c30" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_spline_8_h_1adbd53b003c4b24e45adb7299ac0d3c30" kindref="member">Splint1</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;T&gt;<sp/>&amp;xa,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;T&gt;<sp/>&amp;ya,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;T&gt;<sp/>&amp;y2a,<sp/></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>x,<sp/>T<sp/>&amp;y,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>even=0)</highlight></codeline>
<codeline lineno="122"><highlight class="normal">{</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>klo,<sp/>khi,<sp/>n1,<sp/>n2,<sp/>k;</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/>T<sp/>h,b,a;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/>n1<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/>n2<sp/>=<sp/>xa.size()<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(even)<sp/>{</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/>klo<sp/>=<sp/>(int)(<sp/>(x-xa[n1])/(xa[n2]-xa[n1])*(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)(n2-n1)<sp/>)<sp/>+<sp/>n1;</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/>klo<sp/>=<sp/>klo&lt;n1<sp/>?<sp/>n1<sp/>:<sp/>klo;</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/>klo<sp/>=<sp/>klo&lt;n2<sp/>?<sp/>klo<sp/>:<sp/>n2-1;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/>khi<sp/>=<sp/>klo+1;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/>klo<sp/>=<sp/>n1;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/>khi<sp/>=<sp/>n2;</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(khi-klo<sp/>&gt;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>k<sp/>=<sp/>(khi+klo)<sp/>&gt;&gt;<sp/>1;</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(xa[k]<sp/>&gt;<sp/>x)<sp/>khi<sp/>=<sp/>k;</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>klo<sp/>=<sp/>k;</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/>h<sp/>=<sp/>xa[khi]-xa[klo];</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(h<sp/>==<sp/>0.0)<sp/>{</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/>cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Bad<sp/>XA<sp/>input<sp/>to<sp/>routine<sp/>Splint1\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/>exit(-1);</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/>a<sp/>=<sp/>(xa[khi]-x)/h;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/>b<sp/>=<sp/>(x-xa[klo])/h;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/>y<sp/>=<sp/>a*ya[klo]+b*ya[khi]+((a*a*a-a)*y2a[klo]+(b*b*b-b)*y2a[khi])*(h*h)/6.0;</highlight></codeline>
<codeline lineno="154"><highlight class="normal">}</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="157" refid="_spline_8_h_1a81e72d393dea03979d6a7a749193e57e" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_spline_8_h_1a81e72d393dea03979d6a7a749193e57e" kindref="member">Splint2</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;T&gt;<sp/>&amp;xa,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;T&gt;<sp/>&amp;ya,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;T&gt;<sp/>&amp;y2a,<sp/></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>x,<sp/>T<sp/>&amp;y,<sp/>T<sp/>&amp;dy,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>even=0)</highlight></codeline>
<codeline lineno="159"><highlight class="normal">{</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>klo,<sp/>khi,<sp/>n1,<sp/>n2,<sp/>k;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/>T<sp/>h,b,a;</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/>n1<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/>n2<sp/>=<sp/>xa.size()<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(even)<sp/>{</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/>klo<sp/>=<sp/>(int)(<sp/>(x-xa[n1])/(xa[n2]-xa[n1])*(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)(n2-n1)<sp/>)<sp/>+<sp/>n1;</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/>klo<sp/>=<sp/>klo&lt;n2<sp/>?<sp/>klo<sp/>:<sp/>n2-1;</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/>khi<sp/>=<sp/>klo+1;</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/>klo<sp/>=<sp/>n1;</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/>khi<sp/>=<sp/>n2;</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(khi-klo<sp/>&gt;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>k<sp/>=<sp/>(khi+klo)<sp/>&gt;&gt;<sp/>1;</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(xa[k]<sp/>&gt;<sp/>x)<sp/>khi<sp/>=<sp/>k;</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>klo<sp/>=<sp/>k;</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/>h<sp/>=<sp/>xa[khi]-xa[klo];</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(h<sp/>==<sp/>0.0)<sp/>{</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/>cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Bad<sp/>XA<sp/>input<sp/>to<sp/>routine<sp/>Splint2\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/>exit(-1);</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/>a<sp/>=<sp/>(xa[khi]-x)/h;</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/>b<sp/>=<sp/>(x-xa[klo])/h;</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/>y<sp/>=<sp/>a*ya[klo]+b*ya[khi]+((a*a*a-a)*y2a[klo]+(b*b*b-b)*y2a[khi])*(h*h)/6.0;</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/>dy<sp/>=<sp/>(-ya[klo]+ya[khi])/h<sp/>+</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/>(-(3.0*a*a-1.0)*y2a[klo]+(3.0*b*b-1.0)*y2a[khi])</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*h/6.0;</highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/>ddy<sp/>=<sp/>a*y2a[klo]+b*y2a[khi];<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal">}</highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="198" refid="_spline_8_h_1a949a57250e3ed2816616d628068c0864" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_spline_8_h_1a949a57250e3ed2816616d628068c0864" kindref="member">Splint3</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;T&gt;<sp/>&amp;xa,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;T&gt;<sp/>&amp;ya,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;T&gt;<sp/>&amp;y2a,<sp/></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>x,<sp/>T<sp/>&amp;y,<sp/>T<sp/>&amp;dy,<sp/>T<sp/>&amp;ddy,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>even=0)</highlight></codeline>
<codeline lineno="200"><highlight class="normal">{</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>klo,<sp/>khi,<sp/>n1,<sp/>n2,<sp/>k;</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/>T<sp/>h,b,a;</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/>n1<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/>n2<sp/>=<sp/>xa.size()<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(even)<sp/>{</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/>klo<sp/>=<sp/>(int)(<sp/>(x-xa[n1])/(xa[n2]-xa[n1])*(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)(n2-n1)<sp/>)<sp/>+<sp/>n1;</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/>klo<sp/>=<sp/>klo&lt;n2<sp/>?<sp/>klo<sp/>:<sp/>n2-1;</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/>khi<sp/>=<sp/>klo+1;</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/>klo<sp/>=<sp/>n1;</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/>khi<sp/>=<sp/>n2;</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(khi-klo<sp/>&gt;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>k<sp/>=<sp/>(khi+klo)<sp/>&gt;&gt;<sp/>1;</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(xa[k]<sp/>&gt;<sp/>x)<sp/>khi<sp/>=<sp/>k;</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>klo<sp/>=<sp/>k;</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/>h<sp/>=<sp/>xa[khi]-xa[klo];</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(h<sp/>==<sp/>0.0)<sp/>{</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/>cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Bad<sp/>XA<sp/>input<sp/>to<sp/>routine<sp/>Splint3\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/>exit(-1);</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/>a<sp/>=<sp/>(xa[khi]-x)/h;</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/>b<sp/>=<sp/>(x-xa[klo])/h;</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/>y<sp/>=<sp/>a*ya[klo]+b*ya[khi]+((a*a*a-a)*y2a[klo]+(b*b*b-b)*y2a[khi])*(h*h)/6.0;</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/>dy<sp/>=<sp/>(-ya[klo]+ya[khi])/h<sp/>+</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/>(-(3.0*a*a-1.0)*y2a[klo]+(3.0*b*b-1.0)*y2a[khi])</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*h/6.0;</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/>ddy<sp/>=<sp/>a*y2a[klo]+b*y2a[khi];</highlight></codeline>
<codeline lineno="235"><highlight class="normal">}</highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="/home/weinberg/Projects/EXP/include/Spline.H"/>
  </compounddef>
</doxygen>
