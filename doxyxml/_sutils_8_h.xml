<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="_sutils_8_h" kind="file" language="C++">
    <compoundname>Sutils.H</compoundname>
    <includes local="no">algorithm</includes>
    <includes local="no">sstream</includes>
    <includes local="no">string</includes>
    <includes local="no">vector</includes>
    <includes local="no">cctype</includes>
    <includes local="no">locale</includes>
    <incdepgraph>
      <node id="1">
        <label>/home/weinberg/Projects/EXP/include/Sutils.H</label>
        <link refid="_sutils_8_h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>algorithm</label>
      </node>
      <node id="6">
        <label>cctype</label>
      </node>
      <node id="7">
        <label>locale</label>
      </node>
      <node id="3">
        <label>sstream</label>
      </node>
      <node id="4">
        <label>string</label>
      </node>
      <node id="5">
        <label>vector</label>
      </node>
    </incdepgraph>
    <sectiondef kind="func">
      <memberdef kind="function" id="_sutils_8_h_1a47084ee818936eef3c48be492c0e860f" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void ltrim</definition>
        <argsstring>(std::string &amp;s)</argsstring>
        <name>ltrim</name>
        <param>
          <type>std::string &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>String trim white-space from start (in place version) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/Sutils.H" line="42" column="20" bodyfile="/home/weinberg/Projects/EXP/include/Sutils.H" bodystart="42" bodyend="47"/>
        <referencedby refid="_sutils_8_h_1abe5b7cdc90fb04a4d79b4b6bd200ef3a" compoundref="_sutils_8_h" startline="65" endline="69">ltrim_copy</referencedby>
        <referencedby refid="_sutils_8_h_1a6ef734356291c638e5787a6c668192d4" compoundref="_sutils_8_h" startline="58" endline="62">trim</referencedby>
      </memberdef>
      <memberdef kind="function" id="_sutils_8_h_1abe5b7cdc90fb04a4d79b4b6bd200ef3a" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>static std::string ltrim_copy</definition>
        <argsstring>(std::string s)</argsstring>
        <name>ltrim_copy</name>
        <param>
          <type>std::string</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>String trim white space from start (new copy) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/Sutils.H" line="65" column="27" bodyfile="/home/weinberg/Projects/EXP/include/Sutils.H" bodystart="65" bodyend="69"/>
        <references refid="_sutils_8_h_1a47084ee818936eef3c48be492c0e860f" compoundref="_sutils_8_h" startline="42" endline="47">ltrim</references>
      </memberdef>
      <memberdef kind="function" id="_sutils_8_h_1af6d6bd5c29782e3b958b5f7c0d1ea9e3" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void rtrim</definition>
        <argsstring>(std::string &amp;s)</argsstring>
        <name>rtrim</name>
        <param>
          <type>std::string &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>String trim white-space string from end (in place version) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/Sutils.H" line="50" column="20" bodyfile="/home/weinberg/Projects/EXP/include/Sutils.H" bodystart="50" bodyend="55"/>
        <referencedby refid="_sutils_8_h_1ad586dffdfe677cbd99967a20e58403c9" compoundref="_sutils_8_h" startline="72" endline="76">rtrim_copy</referencedby>
        <referencedby refid="_sutils_8_h_1a6ef734356291c638e5787a6c668192d4" compoundref="_sutils_8_h" startline="58" endline="62">trim</referencedby>
      </memberdef>
      <memberdef kind="function" id="_sutils_8_h_1ad586dffdfe677cbd99967a20e58403c9" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>static std::string rtrim_copy</definition>
        <argsstring>(std::string s)</argsstring>
        <name>rtrim_copy</name>
        <param>
          <type>std::string</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>String trim white space from end (new copy) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/Sutils.H" line="72" column="27" bodyfile="/home/weinberg/Projects/EXP/include/Sutils.H" bodystart="72" bodyend="76"/>
        <references refid="_sutils_8_h_1af6d6bd5c29782e3b958b5f7c0d1ea9e3" compoundref="_sutils_8_h" startline="50" endline="55">rtrim</references>
      </memberdef>
      <memberdef kind="function" id="_sutils_8_h_1a6304df607832de2836395b57b96dbd72" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt; std::string &gt; str_split</definition>
        <argsstring>(const std::string &amp;s, char delimiter)</argsstring>
        <name>str_split</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>char</type>
          <declname>delimiter</declname>
        </param>
        <briefdescription>
<para>Split string on a character delimiter. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/Sutils.H" line="12" column="13" bodyfile="/home/weinberg/Projects/EXP/include/Sutils.H" bodystart="12" bodyend="21"/>
      </memberdef>
      <memberdef kind="function" id="_sutils_8_h_1a9aa0af6643c64cb7ac8aff2524b35200" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string str_to_lower</definition>
        <argsstring>(const std::string &amp;s)</argsstring>
        <name>str_to_lower</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Return a lower case copy. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/Sutils.H" line="24" column="13" bodyfile="/home/weinberg/Projects/EXP/include/Sutils.H" bodystart="24" bodyend="30"/>
      </memberdef>
      <memberdef kind="function" id="_sutils_8_h_1a70176a0ef441de51da94b451f27abec6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string str_to_upper</definition>
        <argsstring>(const std::string &amp;s)</argsstring>
        <name>str_to_upper</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Return an upper case copy. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/Sutils.H" line="33" column="13" bodyfile="/home/weinberg/Projects/EXP/include/Sutils.H" bodystart="33" bodyend="39"/>
      </memberdef>
      <memberdef kind="function" id="_sutils_8_h_1a6ef734356291c638e5787a6c668192d4" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void trim</definition>
        <argsstring>(std::string &amp;s)</argsstring>
        <name>trim</name>
        <param>
          <type>std::string &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>String trim white-spacefrom both ends (in place) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/Sutils.H" line="58" column="20" bodyfile="/home/weinberg/Projects/EXP/include/Sutils.H" bodystart="58" bodyend="62"/>
        <references refid="_sutils_8_h_1a47084ee818936eef3c48be492c0e860f" compoundref="_sutils_8_h" startline="42" endline="47">ltrim</references>
        <references refid="_sutils_8_h_1af6d6bd5c29782e3b958b5f7c0d1ea9e3" compoundref="_sutils_8_h" startline="50" endline="55">rtrim</references>
        <referencedby refid="class_ascii_histo_1ab82f12138ede22ad250ec4c7a8675385" compoundref="_ascii_histo_8_h" startline="60" endline="78">AsciiHisto&lt; T &gt;::AsciiHisto</referencedby>
        <referencedby refid="_sutils_8_h_1a88311911bb82476c66e267a39713c170" compoundref="_sutils_8_h" startline="79" endline="83">trim_copy</referencedby>
      </memberdef>
      <memberdef kind="function" id="_sutils_8_h_1a88311911bb82476c66e267a39713c170" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>static std::string trim_copy</definition>
        <argsstring>(std::string s)</argsstring>
        <name>trim_copy</name>
        <param>
          <type>std::string</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>String trim white space from both ends (new copy) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/Sutils.H" line="79" column="27" bodyfile="/home/weinberg/Projects/EXP/include/Sutils.H" bodystart="79" bodyend="83"/>
        <references refid="_sutils_8_h_1a6ef734356291c638e5787a6c668192d4" compoundref="_sutils_8_h" startline="58" endline="62">trim</references>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#ifndef<sp/>_SUTILS_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_SUTILS_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cctype&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;locale&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="12" refid="_sutils_8_h_1a6304df607832de2836395b57b96dbd72" refkind="member"><highlight class="normal">std::vector&lt;std::string&gt;<sp/><ref refid="_sutils_8_h_1a6304df607832de2836395b57b96dbd72" kindref="member">str_split</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>s,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>delimiter)</highlight></codeline>
<codeline lineno="13"><highlight class="normal">{</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/>std::vector&lt;std::string&gt;<sp/>tokens;</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/>std::string<sp/>token;</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/>std::istringstream<sp/>tokenStream(s);</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(std::getline(tokenStream,<sp/>token,<sp/>delimiter))<sp/>{</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/>tokens.push_back(token);</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tokens;</highlight></codeline>
<codeline lineno="21"><highlight class="normal">}</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="24" refid="_sutils_8_h_1a9aa0af6643c64cb7ac8aff2524b35200" refkind="member"><highlight class="normal">std::string<sp/><ref refid="_sutils_8_h_1a9aa0af6643c64cb7ac8aff2524b35200" kindref="member">str_to_lower</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>s)</highlight></codeline>
<codeline lineno="25"><highlight class="normal">{</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/>std::string<sp/>d(s);</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/>std::for_each(d.begin(),<sp/>d.end(),<sp/>[](</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>&amp;<sp/>c){<sp/>c<sp/>=<sp/>std::tolower(c);<sp/>});</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>d;</highlight></codeline>
<codeline lineno="30"><highlight class="normal">}</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="33" refid="_sutils_8_h_1a70176a0ef441de51da94b451f27abec6" refkind="member"><highlight class="normal">std::string<sp/><ref refid="_sutils_8_h_1a70176a0ef441de51da94b451f27abec6" kindref="member">str_to_upper</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>s)</highlight></codeline>
<codeline lineno="34"><highlight class="normal">{</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/>std::string<sp/>d(s);</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/>std::for_each(d.begin(),<sp/>d.end(),<sp/>[](</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>&amp;<sp/>c){<sp/>c<sp/>=<sp/>std::toupper(c);<sp/>});</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>d;</highlight></codeline>
<codeline lineno="39"><highlight class="normal">}</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="42" refid="_sutils_8_h_1a47084ee818936eef3c48be492c0e860f" refkind="member"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_sutils_8_h_1a47084ee818936eef3c48be492c0e860f" kindref="member">ltrim</ref>(std::string<sp/>&amp;s)</highlight></codeline>
<codeline lineno="43"><highlight class="normal">{</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/>s.erase(s.begin(),<sp/>std::find_if(s.begin(),<sp/>s.end(),<sp/>[](</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>ch)<sp/>{</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>!std::isspace(ch);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/>}));</highlight></codeline>
<codeline lineno="47"><highlight class="normal">}</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="50" refid="_sutils_8_h_1af6d6bd5c29782e3b958b5f7c0d1ea9e3" refkind="member"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_sutils_8_h_1af6d6bd5c29782e3b958b5f7c0d1ea9e3" kindref="member">rtrim</ref>(std::string<sp/>&amp;s)</highlight></codeline>
<codeline lineno="51"><highlight class="normal">{</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/>s.erase(std::find_if(s.rbegin(),<sp/>s.rend(),<sp/>[](</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>ch)<sp/>{</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>!std::isspace(ch);</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/>}).base(),<sp/>s.end());</highlight></codeline>
<codeline lineno="55"><highlight class="normal">}</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="58" refid="_sutils_8_h_1a6ef734356291c638e5787a6c668192d4" refkind="member"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_sutils_8_h_1a6ef734356291c638e5787a6c668192d4" kindref="member">trim</ref>(std::string<sp/>&amp;s)</highlight></codeline>
<codeline lineno="59"><highlight class="normal">{</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><ref refid="_sutils_8_h_1a47084ee818936eef3c48be492c0e860f" kindref="member">ltrim</ref>(s);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><ref refid="_sutils_8_h_1af6d6bd5c29782e3b958b5f7c0d1ea9e3" kindref="member">rtrim</ref>(s);</highlight></codeline>
<codeline lineno="62"><highlight class="normal">}</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="65" refid="_sutils_8_h_1abe5b7cdc90fb04a4d79b4b6bd200ef3a" refkind="member"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::string<sp/><ref refid="_sutils_8_h_1abe5b7cdc90fb04a4d79b4b6bd200ef3a" kindref="member">ltrim_copy</ref>(std::string<sp/>s)</highlight></codeline>
<codeline lineno="66"><highlight class="normal">{</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><ref refid="_sutils_8_h_1a47084ee818936eef3c48be492c0e860f" kindref="member">ltrim</ref>(s);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s;</highlight></codeline>
<codeline lineno="69"><highlight class="normal">}</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="72" refid="_sutils_8_h_1ad586dffdfe677cbd99967a20e58403c9" refkind="member"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::string<sp/><ref refid="_sutils_8_h_1ad586dffdfe677cbd99967a20e58403c9" kindref="member">rtrim_copy</ref>(std::string<sp/>s)</highlight></codeline>
<codeline lineno="73"><highlight class="normal">{</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><ref refid="_sutils_8_h_1af6d6bd5c29782e3b958b5f7c0d1ea9e3" kindref="member">rtrim</ref>(s);</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s;</highlight></codeline>
<codeline lineno="76"><highlight class="normal">}</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="79" refid="_sutils_8_h_1a88311911bb82476c66e267a39713c170" refkind="member"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::string<sp/><ref refid="_sutils_8_h_1a88311911bb82476c66e267a39713c170" kindref="member">trim_copy</ref>(std::string<sp/>s)</highlight></codeline>
<codeline lineno="80"><highlight class="normal">{</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><ref refid="_sutils_8_h_1a6ef734356291c638e5787a6c668192d4" kindref="member">trim</ref>(s);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s;</highlight></codeline>
<codeline lineno="83"><highlight class="normal">}</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="/home/weinberg/Projects/EXP/include/Sutils.H"/>
  </compounddef>
</doxygen>
