<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="class_iterable" kind="class" language="C++" prot="public">
    <compoundname>Iterable</compoundname>
    <basecompoundref refid="struct_iterator" prot="public" virt="non-virtual">Iterator&lt; T &gt;</basecompoundref>
    <includes refid="_iterable_8_h" local="no">Iterable.H</includes>
    <templateparamlist>
      <param>
        <type>typename T</type>
      </param>
    </templateparamlist>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_iterable_1a1ba485e8dba76e792d973a9a23eac8d1" prot="private" static="no" mutable="no">
        <type>T *</type>
        <definition>T* Iterable&lt; T &gt;::ptr</definition>
        <argsstring></argsstring>
        <name>ptr</name>
        <qualifiedname>Iterable::ptr</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/Iterable.H" line="22" column="5" bodyfile="/home/weinberg/Projects/EXP/include/Iterable.H" bodystart="22" bodyend="-1"/>
        <referencedby refid="class_iterable_1a0b1241dd5184b102952ba0f70bf928df" compoundref="_iterable_8_h" startline="29" endline="29">Iterable&lt; T &gt;::operator*</referencedby>
        <referencedby refid="class_iterable_1a9cdbe54599a872dc80729ba43a44ed9e" compoundref="_iterable_8_h" startline="25" endline="25">Iterable&lt; T &gt;::operator++</referencedby>
        <referencedby refid="class_iterable_1a0e9c879856f31f4e866b97141f386109" compoundref="_iterable_8_h" startline="27" endline="27">Iterable&lt; T &gt;::operator==</referencedby>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="class_iterable_1a8ff8a2db20db0c23274bfbb2ce925c90" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Iterable&lt; T &gt;::Iterable</definition>
        <argsstring>(T *_ptr)</argsstring>
        <name>Iterable</name>
        <qualifiedname>Iterable::Iterable</qualifiedname>
        <param>
          <type>T *</type>
          <declname>_ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/Iterable.H" line="24" column="12" bodyfile="/home/weinberg/Projects/EXP/include/Iterable.H" bodystart="24" bodyend="24"/>
      </memberdef>
      <memberdef kind="function" id="class_iterable_1a88dcd5e0508fdf2db02c3a5a6b0733dd" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Iterable&lt; T &gt;::operator!=</definition>
        <argsstring>(Iterable other) const</argsstring>
        <name>operator!=</name>
        <qualifiedname>Iterable::operator!=</qualifiedname>
        <param>
          <type><ref refid="class_iterable" kindref="compound">Iterable</ref></type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/Iterable.H" line="28" column="8" bodyfile="/home/weinberg/Projects/EXP/include/Iterable.H" bodystart="28" bodyend="28"/>
      </memberdef>
      <memberdef kind="function" id="class_iterable_1a0b1241dd5184b102952ba0f70bf928df" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>T *</type>
        <definition>T * Iterable&lt; T &gt;::operator*</definition>
        <argsstring>() const</argsstring>
        <name>operator*</name>
        <qualifiedname>Iterable::operator*</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/Iterable.H" line="29" column="5" bodyfile="/home/weinberg/Projects/EXP/include/Iterable.H" bodystart="29" bodyend="29"/>
        <references refid="class_iterable_1a1ba485e8dba76e792d973a9a23eac8d1" compoundref="_iterable_8_h" startline="22">Iterable&lt; T &gt;::ptr</references>
      </memberdef>
      <memberdef kind="function" id="class_iterable_1a9cdbe54599a872dc80729ba43a44ed9e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_iterable" kindref="compound">Iterable</ref> &amp;</type>
        <definition>Iterable &amp; Iterable&lt; T &gt;::operator++</definition>
        <argsstring>()</argsstring>
        <name>operator++</name>
        <qualifiedname>Iterable::operator++</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/Iterable.H" line="25" column="12" bodyfile="/home/weinberg/Projects/EXP/include/Iterable.H" bodystart="25" bodyend="25"/>
        <references refid="class_iterable_1a1ba485e8dba76e792d973a9a23eac8d1" compoundref="_iterable_8_h" startline="22">Iterable&lt; T &gt;::ptr</references>
      </memberdef>
      <memberdef kind="function" id="class_iterable_1a5c1337488f0d3b5416346bff39c0a54a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_iterable" kindref="compound">Iterable</ref></type>
        <definition>Iterable Iterable&lt; T &gt;::operator++</definition>
        <argsstring>(int)</argsstring>
        <name>operator++</name>
        <qualifiedname>Iterable::operator++</qualifiedname>
        <param>
          <type>int</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/Iterable.H" line="26" column="12" bodyfile="/home/weinberg/Projects/EXP/include/Iterable.H" bodystart="26" bodyend="26"/>
      </memberdef>
      <memberdef kind="function" id="class_iterable_1a0e9c879856f31f4e866b97141f386109" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Iterable&lt; T &gt;::operator==</definition>
        <argsstring>(Iterable other) const</argsstring>
        <name>operator==</name>
        <qualifiedname>Iterable::operator==</qualifiedname>
        <param>
          <type><ref refid="class_iterable" kindref="compound">Iterable</ref></type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/Iterable.H" line="27" column="8" bodyfile="/home/weinberg/Projects/EXP/include/Iterable.H" bodystart="27" bodyend="27"/>
        <references refid="class_iterable_1a1ba485e8dba76e792d973a9a23eac8d1" compoundref="_iterable_8_h" startline="22">Iterable&lt; T &gt;::ptr</references>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>Iterable&lt; T &gt;</label>
        <link refid="class_iterable"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>Iterator&lt; T &gt;</label>
        <link refid="struct_iterator"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>Iterable&lt; T &gt;</label>
        <link refid="class_iterable"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>Iterator&lt; T &gt;</label>
        <link refid="struct_iterator"/>
      </node>
    </collaborationgraph>
    <location file="/home/weinberg/Projects/EXP/include/Iterable.H" line="19" column="1" bodyfile="/home/weinberg/Projects/EXP/include/Iterable.H" bodystart="20" bodyend="30"/>
    <listofallmembers>
      <member refid="struct_iterator_1a397e0a4d87f933bbfd566a3368aca34c" prot="public" virt="non-virtual"><scope>Iterable</scope><name>difference_type</name></member>
      <member refid="class_iterable_1a8ff8a2db20db0c23274bfbb2ce925c90" prot="public" virt="non-virtual"><scope>Iterable</scope><name>Iterable</name></member>
      <member refid="struct_iterator_1acdd10e3cfe71d270663c73685c1b0791" prot="public" virt="non-virtual"><scope>Iterable</scope><name>iterator_category</name></member>
      <member refid="class_iterable_1a88dcd5e0508fdf2db02c3a5a6b0733dd" prot="public" virt="non-virtual"><scope>Iterable</scope><name>operator!=</name></member>
      <member refid="class_iterable_1a0b1241dd5184b102952ba0f70bf928df" prot="public" virt="non-virtual"><scope>Iterable</scope><name>operator*</name></member>
      <member refid="class_iterable_1a9cdbe54599a872dc80729ba43a44ed9e" prot="public" virt="non-virtual"><scope>Iterable</scope><name>operator++</name></member>
      <member refid="class_iterable_1a5c1337488f0d3b5416346bff39c0a54a" prot="public" virt="non-virtual"><scope>Iterable</scope><name>operator++</name></member>
      <member refid="class_iterable_1a0e9c879856f31f4e866b97141f386109" prot="public" virt="non-virtual"><scope>Iterable</scope><name>operator==</name></member>
      <member refid="struct_iterator_1a37c4732ae0b73e9fdc3a585c01750d05" prot="public" virt="non-virtual"><scope>Iterable</scope><name>pointer</name></member>
      <member refid="class_iterable_1a1ba485e8dba76e792d973a9a23eac8d1" prot="private" virt="non-virtual"><scope>Iterable</scope><name>ptr</name></member>
      <member refid="struct_iterator_1a104c7f213cd33d599aa25277176529d5" prot="public" virt="non-virtual"><scope>Iterable</scope><name>reference</name></member>
      <member refid="struct_iterator_1ab30ee4ae468e806a7897d6a0c7705c54" prot="public" virt="non-virtual"><scope>Iterable</scope><name>value_type</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
