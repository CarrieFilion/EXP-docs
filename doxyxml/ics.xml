<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="ics" kind="page">
    <compoundname>ics</compoundname>
    <title>Initial condition programs</title>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>You will find three versions of the <computeroutput>gendisk</computeroutput>: <itemizedlist>
<listitem>
<para><computeroutput>gendisk</computeroutput> is the original implementation, kept around for backwards compatibility but fully replaced by </para>
</listitem>
<listitem>
<para><computeroutput>gendisk2</computeroutput>, which most up-to-date tuned and debugged version (<emphasis>so you probably want to use this one!</emphasis>) </para>
</listitem>
<listitem>
<para><computeroutput>gendisk3</computeroutput> explores a combined Eddington inversion + quadratic programming distribution function generation. This should only be used if you rsearching the properties of distribution functions. </para>
</listitem>
</itemizedlist>
</para>
<para><heading level="2">Algorithm summary </heading>
</para>
<para>The <computeroutput>gendisk2</computeroutput> will generate dark matter, star and gas particles.The phase-space generation algorithm is as follows: <orderedlist>
<listitem>
<para>The disk model (specified by scale length, scale height, and mass) is deprojected and added to the halo model (which is specified as a table and may contain a bulge component) to define a monopole solution of the Poisson equation. See <ref refid="class_spherical_model_table" kindref="compound">SphericalModelTable</ref> for details. </para>
</listitem>
<listitem>
<para>The halo particle distribution function is generated by Eddington inversion and the desired number of phase-space points are realized as random variates. </para>
</listitem>
<listitem>
<para>The potential for the realized points is computed using the specified spherical basis. </para>
</listitem>
<listitem>
<para>The spatial distribution of the disk component is realized. </para>
</listitem>
<listitem>
<para>The potential for the realized points is computed using the specified cylindrical basis </para>
</listitem>
<listitem>
<para>The cylindrical Jeans&apos; equations are solved in the combined disk<itemizedlist>
<listitem><para>halo potential and used to realize the velocities for the disk component. </para>
</listitem></itemizedlist>
</para>
</listitem>
<listitem>
<para>The gas component is realized in the combined potential of the disk and gas. <linebreak/>
 </para>
</listitem>
</orderedlist>
</para>
<para><heading level="2">Invoking </heading>
</para>
<para><simplesect kind="par"><title>mpirun -v -np &lt;# of nodes&gt; N gendisk2 <ndash/> [options]</title><para></para>
</simplesect>
Generates a spherical phase space with an embedded disk using Jeans&apos; equations assuming velocity isotropy for the spherical component and in-plane isotropy for the disk component</para>
<para>Options: <preformatted>
  -H num     number of halo particles (1000)
  -D num     number of disk particles (1000)
  -L lmax    spherical harmonic order (4)
  -M mmax    cylindrical harmonic order (4)
  -X lmax    maximum l for cylindrical expansion (26)
  -N nmax    spherical radial order (10)
  -n nmax2   cylindrical radial order (8)
  -Q value   Toomre Q for radial dispersion (1.2)
  -l a       scale length (2.0)
  -Z h       scale height (0.1)
  -m mass    disk mass (1.0)
  -r rsphsl  edge for SL expansion (47.5)
  -R expon   power law divergence exponent (unset)
  -s scale   halo coordinate scale
  -1 rmin    minimum radius for change over to DF
  -2 rmax    maximum radius for change over to DF
  -b         print out basis images (false)
  -z         zero center of mass and velocity (false)
</preformatted></para>
<para>This command will read parameters from a script as well. E.g.</para>
<para><simplesect kind="par"><title>mpirun -v -np &lt;# of nodes&gt; N gendisk2 -f script.file</title><para></para>
</simplesect>
where the script file is a list of <computeroutput>key=value</computeroutput> pairs.</para>
<para><heading level="2">Full example </heading>
</para>
<para><heading level="3">Input files </heading>
</para>
<para>Halo model file: <ulink url="../ic_example/SLGridSph.model">here</ulink><linebreak/>
 Gendisk input file: <ulink url="../ic_example/gendisk.in">here</ulink><linebreak/>
 EXP input file: <ulink url="../ic_example/in.bar">here</ulink><linebreak/>
 Halo config file: <ulink url="../ic_example/halo.conf">here</ulink><linebreak/>
 Disk config file: <ulink url="../ic_example/disk.conf">here</ulink><linebreak/>
 PBS input file: <ulink url="../ic_example/pbs_job">here</ulink><linebreak/>
</para>
<para><heading level="3">Command sequence </heading>
</para>
<para><orderedlist>
<listitem>
<para>This makes the ICs: <computeroutput>mpirun -v -np ## gendisk2 -f gendisk.in</computeroutput> </para>
</listitem>
<listitem>
<para>This starts the run: <computeroutput>qsub -q opteron -l nodes=16:ppn=16 pbs_job</computeroutput> </para>
</listitem>
</orderedlist>
The absolute paths in these input files will have to be changed, of course.</para>
<para><heading level="3">Sample output </heading>
</para>
<para><image type="html" name="../ic_example/frame.png" alt="Face on and edge on view" inline="yes"></image>
 <linebreak/>
<linebreak/>
 <ulink url="../ic_example/output.avi">Click here for a movie</ulink> <linebreak/>
 </para>
    </detaileddescription>
    <location file="ics.doc"/>
  </compounddef>
</doxygen>
