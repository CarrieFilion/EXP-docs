<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="namespacecxxopts_1_1values" kind="namespace" language="C++">
    <compoundname>cxxopts::values</compoundname>
    <innerclass refid="classcxxopts_1_1values_1_1abstract__value" prot="public">cxxopts::values::abstract_value</innerclass>
    <innerclass refid="classcxxopts_1_1values_1_1standard__value" prot="public">cxxopts::values::standard_value</innerclass>
    <innerclass refid="classcxxopts_1_1values_1_1standard__value_3_01bool_01_4" prot="public">cxxopts::values::standard_value&lt; bool &gt;</innerclass>
    <innerclass refid="structcxxopts_1_1values_1_1type__is__container" prot="public">cxxopts::values::type_is_container</innerclass>
    <innerclass refid="structcxxopts_1_1values_1_1type__is__container_3_01std_1_1vector_3_01_t_01_4_01_4" prot="public">cxxopts::values::type_is_container&lt; std::vector&lt; T &gt; &gt;</innerclass>
    <innernamespace refid="namespacecxxopts_1_1values_1_1detail">cxxopts::values::detail</innernamespace>
    <innernamespace refid="namespacecxxopts_1_1values_1_1parser__tool">cxxopts::values::parser_tool</innernamespace>
    <sectiondef kind="func">
      <memberdef kind="function" id="namespacecxxopts_1_1values_1ad346cd7dc5d4d470492c85de801a16b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename R</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void cxxopts::values::checked_negate</definition>
        <argsstring>(R &amp;, T &amp;&amp;, const std::string &amp;text, std::false_type)</argsstring>
        <name>checked_negate</name>
        <qualifiedname>cxxopts::values::checked_negate</qualifiedname>
        <param>
          <type>R &amp;</type>
        </param>
        <param>
          <type>T &amp;&amp;</type>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>text</declname>
        </param>
        <param>
          <type>std::false_type</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/cxxopts.H" line="871" column="5" bodyfile="/home/weinberg/Projects/EXP/include/cxxopts.H" bodystart="871" bodyend="874"/>
      </memberdef>
      <memberdef kind="function" id="namespacecxxopts_1_1values_1a49e0fbdea76975c4b740475dd9aec816" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename R</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void cxxopts::values::checked_negate</definition>
        <argsstring>(R &amp;r, T &amp;&amp;t, const std::string &amp;, std::true_type)</argsstring>
        <name>checked_negate</name>
        <qualifiedname>cxxopts::values::checked_negate</qualifiedname>
        <param>
          <type>R &amp;</type>
          <declname>r</declname>
        </param>
        <param>
          <type>T &amp;&amp;</type>
          <declname>t</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
        </param>
        <param>
          <type>std::true_type</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/cxxopts.H" line="861" column="5" bodyfile="/home/weinberg/Projects/EXP/include/cxxopts.H" bodystart="861" bodyend="867"/>
      </memberdef>
      <memberdef kind="function" id="namespacecxxopts_1_1values_1a2e205dc91741b7dde43b825da60c9f4c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void cxxopts::values::integer_parser</definition>
        <argsstring>(const std::string &amp;text, T &amp;value)</argsstring>
        <name>integer_parser</name>
        <qualifiedname>cxxopts::values::integer_parser</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>text</declname>
        </param>
        <param>
          <type>T &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/cxxopts.H" line="878" column="5" bodyfile="/home/weinberg/Projects/EXP/include/cxxopts.H" bodystart="878" bodyend="931"/>
        <references refid="structcxxopts_1_1values_1_1parser__tool_1_1_integer_desc_1a382f4c32680ded0fb611303f90ad0425" compoundref="cxxopts_8_h" startline="567">cxxopts::values::parser_tool::IntegerDesc::base</references>
        <references refid="structcxxopts_1_1values_1_1parser__tool_1_1_integer_desc_1a03eb11087b99130f7e098f8b6a3a5f50" compoundref="cxxopts_8_h" startline="566">cxxopts::values::parser_tool::IntegerDesc::negative</references>
        <references refid="namespacecxxopts_1_1values_1_1parser__tool_1a7912e06f8258eb2a618ba94a7ede46d4" compoundref="cxxopts_8_h" startline="735" endline="758">cxxopts::values::parser_tool::SplitInteger</references>
        <references refid="structcxxopts_1_1values_1_1parser__tool_1_1_integer_desc_1a20ab2c3d23d9210773f377b083e898a4" compoundref="cxxopts_8_h" startline="568">cxxopts::values::parser_tool::IntegerDesc::value</references>
        <references refid="namespacecxxopts_1a6b58e451713ebbf12866c1cd8e0a66ab" compoundref="cxxopts_8_h" startline="1224" endline="1227">cxxopts::value</references>
        <referencedby refid="namespacecxxopts_1_1values_1a9782d53713f30ced7138719bd966db2b" compoundref="cxxopts_8_h" startline="946" endline="949">parse_value</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacecxxopts_1_1values_1aaa73e425c1d63db7975dbebd86c2f947" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void cxxopts::values::parse_value</definition>
        <argsstring>(const std::string &amp;text, bool &amp;value)</argsstring>
        <name>parse_value</name>
        <qualifiedname>cxxopts::values::parse_value</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>text</declname>
        </param>
        <param>
          <type>bool &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/cxxopts.H" line="953" column="5" bodyfile="/home/weinberg/Projects/EXP/include/cxxopts.H" bodystart="953" bodyend="968"/>
        <references refid="namespacecxxopts_1_1values_1_1parser__tool_1aef26707302ebd8565487e8d6268c2285" compoundref="cxxopts_8_h" startline="767" endline="772">cxxopts::values::parser_tool::IsFalseText</references>
        <references refid="namespacecxxopts_1_1values_1_1parser__tool_1a1b7a1e0063d8f2dd9dc02ada983a1aec" compoundref="cxxopts_8_h" startline="760" endline="765">cxxopts::values::parser_tool::IsTrueText</references>
        <references refid="namespacecxxopts_1a6b58e451713ebbf12866c1cd8e0a66ab" compoundref="cxxopts_8_h" startline="1224" endline="1227">cxxopts::value</references>
      </memberdef>
      <memberdef kind="function" id="namespacecxxopts_1_1values_1a9db2f6a97c2fbfd06a5a342917fbd21f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void cxxopts::values::parse_value</definition>
        <argsstring>(const std::string &amp;text, char &amp;c)</argsstring>
        <name>parse_value</name>
        <qualifiedname>cxxopts::values::parse_value</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>text</declname>
        </param>
        <param>
          <type>char &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/cxxopts.H" line="1019" column="10" bodyfile="/home/weinberg/Projects/EXP/include/cxxopts.H" bodystart="1019" bodyend="1027"/>
      </memberdef>
      <memberdef kind="function" id="namespacecxxopts_1_1values_1a1643e21992e1d5ad5f2012f01f6f6f0a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void cxxopts::values::parse_value</definition>
        <argsstring>(const std::string &amp;text, std::string &amp;value)</argsstring>
        <name>parse_value</name>
        <qualifiedname>cxxopts::values::parse_value</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>text</declname>
        </param>
        <param>
          <type>std::string &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/cxxopts.H" line="972" column="5" bodyfile="/home/weinberg/Projects/EXP/include/cxxopts.H" bodystart="972" bodyend="975"/>
        <references refid="namespacecxxopts_1a6b58e451713ebbf12866c1cd8e0a66ab" compoundref="cxxopts_8_h" startline="1224" endline="1227">cxxopts::value</references>
      </memberdef>
      <memberdef kind="function" id="namespacecxxopts_1_1values_1a9cc26abde531fd7df6ff0ff07cc6d413" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void cxxopts::values::parse_value</definition>
        <argsstring>(const std::string &amp;text, std::vector&lt; T &gt; &amp;value)</argsstring>
        <name>parse_value</name>
        <qualifiedname>cxxopts::values::parse_value</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>text</declname>
        </param>
        <param>
          <type>std::vector&lt; T &gt; &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/cxxopts.H" line="990" column="5" bodyfile="/home/weinberg/Projects/EXP/include/cxxopts.H" bodystart="990" bodyend="1005"/>
        <references refid="cxxopts_8_h_1a564e0c1dcc7d9a5202f36755f4fb07c7" compoundref="cxxopts_8_h" startline="71">CXXOPTS_VECTOR_DELIMITER</references>
        <references refid="namespacecxxopts_1_1values_1a9782d53713f30ced7138719bd966db2b" compoundref="cxxopts_8_h" startline="946" endline="949">parse_value</references>
        <references refid="namespacecxxopts_1a6b58e451713ebbf12866c1cd8e0a66ab" compoundref="cxxopts_8_h" startline="1224" endline="1227">cxxopts::value</references>
      </memberdef>
      <memberdef kind="function" id="namespacecxxopts_1_1values_1a9782d53713f30ced7138719bd966db2b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename std::enable_if&lt; std::is_integral&lt; T &gt;::value &gt;::type *</type>
            <defval>nullptr</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void cxxopts::values::parse_value</definition>
        <argsstring>(const std::string &amp;text, T &amp;value)</argsstring>
        <name>parse_value</name>
        <qualifiedname>cxxopts::values::parse_value</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>text</declname>
        </param>
        <param>
          <type>T &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/cxxopts.H" line="946" column="10" bodyfile="/home/weinberg/Projects/EXP/include/cxxopts.H" bodystart="946" bodyend="949"/>
        <references refid="namespacecxxopts_1_1values_1a2e205dc91741b7dde43b825da60c9f4c" compoundref="cxxopts_8_h" startline="878" endline="931">integer_parser</references>
        <references refid="namespacecxxopts_1a6b58e451713ebbf12866c1cd8e0a66ab" compoundref="cxxopts_8_h" startline="1224" endline="1227">cxxopts::value</references>
        <referencedby refid="classcxxopts_1_1_key_value_1af8c51b8c5fb52c8cb23c0437af2375ff" compoundref="cxxopts_8_h" startline="1452" endline="1457">cxxopts::KeyValue::as</referencedby>
        <referencedby refid="classcxxopts_1_1values_1_1abstract__value_1aa8dfcbbfb1f9b28261a3e4fa564a02c1" compoundref="cxxopts_8_h" startline="1093" endline="1096">cxxopts::values::abstract_value&lt; T &gt;::parse</referencedby>
        <referencedby refid="classcxxopts_1_1values_1_1abstract__value_1ad6599c6a72ae7903a7a9b6dda2f828cf" compoundref="cxxopts_8_h" startline="1081" endline="1084">cxxopts::values::abstract_value&lt; T &gt;::parse</referencedby>
        <referencedby refid="namespacecxxopts_1_1values_1a9cc26abde531fd7df6ff0ff07cc6d413" compoundref="cxxopts_8_h" startline="990" endline="1005">parse_value</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacecxxopts_1_1values_1a56fb16f3a09e011db85757491c52691e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void cxxopts::values::stringstream_parser</definition>
        <argsstring>(const std::string &amp;text, T &amp;value)</argsstring>
        <name>stringstream_parser</name>
        <qualifiedname>cxxopts::values::stringstream_parser</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>text</declname>
        </param>
        <param>
          <type>T &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/cxxopts.H" line="934" column="10" bodyfile="/home/weinberg/Projects/EXP/include/cxxopts.H" bodystart="934" bodyend="941"/>
        <references refid="namespacecxxopts_1a6b58e451713ebbf12866c1cd8e0a66ab" compoundref="cxxopts_8_h" startline="1224" endline="1227">cxxopts::value</references>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/weinberg/Projects/EXP/include/cxxopts.H" line="560" column="3"/>
  </compounddef>
</doxygen>
