<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="numerical_8_h" kind="file" language="C++">
    <compoundname>numerical.H</compoundname>
    <includes local="no">functional</includes>
    <includes local="no">Eigen/Eigen</includes>
    <includedby refid="phase_8_h" local="no">/home/weinberg/Projects/EXP/include/phase.H</includedby>
    <includedby refid="sphere_s_l_8_h" local="no">/home/weinberg/Projects/EXP/include/sphereSL.H</includedby>
    <includedby refid="_disk_eval_8_h" local="no">/home/weinberg/Projects/EXP/utils/ICs/DiskEval.H</includedby>
    <incdepgraph>
      <node id="1">
        <label>/home/weinberg/Projects/EXP/include/numerical.H</label>
        <link refid="numerical_8_h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>Eigen/Eigen</label>
      </node>
      <node id="2">
        <label>functional</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="1">
        <label>/home/weinberg/Projects/EXP/include/numerical.H</label>
        <link refid="numerical_8_h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>/home/weinberg/Projects/EXP/include/phase.H</label>
        <link refid="phase_8_h"/>
      </node>
      <node id="3">
        <label>/home/weinberg/Projects/EXP/include/sphereSL.H</label>
        <link refid="sphere_s_l_8_h"/>
      </node>
      <node id="4">
        <label>/home/weinberg/Projects/EXP/utils/ICs/DiskEval.H</label>
        <link refid="_disk_eval_8_h"/>
      </node>
    </invincdepgraph>
    <sectiondef kind="define">
      <memberdef kind="define" id="numerical_8_h_1a39488788cf0a27cf6e39f97a05383073" prot="public" static="no">
        <name>DOUBLE</name>
        <param><defname>X</defname></param>
        <initializer>((double) (X))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/numerical.H" line="17" column="9" bodyfile="/home/weinberg/Projects/EXP/include/numerical.H" bodystart="17" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="numerical_8_h_1a97aa4af1a3e9105a48c9fe831b37d9ec" prot="public" static="no">
        <name>FLOAT</name>
        <param><defname>X</defname></param>
        <initializer>((float) (X))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/numerical.H" line="16" column="9" bodyfile="/home/weinberg/Projects/EXP/include/numerical.H" bodystart="16" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="numerical_8_h_1aff9931d7524c88e07743af6535b20761" prot="public" static="no">
        <name>MAX</name>
        <param><defname>X</defname></param>
        <param><defname>Y</defname></param>
        <initializer>(((X) &gt; (Y)) ? (X) : (Y))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/numerical.H" line="10" column="9" bodyfile="/home/weinberg/Projects/EXP/include/numerical.H" bodystart="10" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="numerical_8_h_1ad2f3678bf5eae3684fc497130b946eae" prot="public" static="no">
        <name>MIN</name>
        <param><defname>X</defname></param>
        <param><defname>Y</defname></param>
        <initializer>(((X) &lt; (Y)) ? (X) : (Y))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/numerical.H" line="13" column="9" bodyfile="/home/weinberg/Projects/EXP/include/numerical.H" bodystart="13" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="numerical_8_h_1a90bdd4bad125296a08c222d412674ed3" prot="public" static="no">
        <name>Sign</name>
        <param><defname>X</defname></param>
        <initializer>(((X)&gt;0) ? (1.0) : (-1.0))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/numerical.H" line="22" column="10" bodyfile="/home/weinberg/Projects/EXP/include/numerical.H" bodystart="22" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="numerical_8_h_1a2eb03319e5ccdc1a14b73a7d8b1724de" prot="public" static="no">
        <name>SQR</name>
        <param><defname>X</defname></param>
        <initializer>((X)*(X))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/numerical.H" line="18" column="9" bodyfile="/home/weinberg/Projects/EXP/include/numerical.H" bodystart="18" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="numerical_8_h_1acf1c38f71f39386356edb151a131ad11" prot="public" static="no">
        <name>TINY</name>
        <initializer>1.e-10</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/numerical.H" line="20" column="9" bodyfile="/home/weinberg/Projects/EXP/include/numerical.H" bodystart="20" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="typedef">
      <memberdef kind="typedef" id="numerical_8_h_1a656074dfe6eff519a38be1c6965428ce" prot="public" static="no">
        <type>std::function&lt; void(double, Eigen::VectorXd &amp;, Eigen::VectorXd &amp;)&gt;</type>
        <definition>using ode_derivs =  std::function&lt;void(double, Eigen::VectorXd&amp;, Eigen::VectorXd&amp;)&gt;</definition>
        <argsstring></argsstring>
        <name>ode_derivs</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/numerical.H" line="73" column="1" bodyfile="/home/weinberg/Projects/EXP/include/numerical.H" bodystart="74" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="numerical_8_h_1a0aefe47f5a0d9a3f079c32493f0f7c78" prot="public" static="no">
        <type>std::function&lt; void(Eigen::VectorXd &amp;, Eigen::VectorXd &amp;, int, double &amp;, double, double, Eigen::VectorXd &amp;, double &amp;, double &amp;, <ref refid="numerical_8_h_1a656074dfe6eff519a38be1c6965428ce" kindref="member">ode_derivs</ref>)&gt;</type>
        <definition>using ode_integrator =  std::function&lt;void(Eigen::VectorXd&amp;, Eigen::VectorXd&amp;, int, double&amp;, double, double, Eigen::VectorXd&amp;, double&amp;, double&amp;, ode_derivs)&gt;</definition>
        <argsstring></argsstring>
        <name>ode_integrator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/numerical.H" line="76" column="1" bodyfile="/home/weinberg/Projects/EXP/include/numerical.H" bodystart="79" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="numerical_8_h_1a0774b45de49a0704d980661d93332d34" prot="public" static="no">
        <type>std::function&lt; void(Eigen::VectorXd &amp;, Eigen::VectorXd &amp;, int, double, double, Eigen::VectorXd &amp;, <ref refid="numerical_8_h_1a656074dfe6eff519a38be1c6965428ce" kindref="member">ode_derivs</ref>)&gt;</type>
        <definition>using ode_rk =  std::function&lt;void(Eigen::VectorXd&amp;, Eigen::VectorXd&amp;, int, double, double, Eigen::VectorXd&amp;, ode_derivs)&gt;</definition>
        <argsstring></argsstring>
        <name>ode_rk</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/numerical.H" line="81" column="1" bodyfile="/home/weinberg/Projects/EXP/include/numerical.H" bodystart="83" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="numerical_8_h_1a1bd598a94747cd8305e2785b2c056353" prot="public" static="no">
        <type>std::function&lt; void(double, Eigen::VectorXd &amp;, Eigen::VectorXd &amp;, Eigen::VectorXd &amp;)&gt;</type>
        <definition>using symp_derivs =  std::function&lt;void(double, Eigen::VectorXd&amp;, Eigen::VectorXd&amp;, Eigen::VectorXd&amp;)&gt;</definition>
        <argsstring></argsstring>
        <name>symp_derivs</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/numerical.H" line="86" column="1" bodyfile="/home/weinberg/Projects/EXP/include/numerical.H" bodystart="88" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="numerical_8_h_1aad116aeeb2c95bb00b91cb98b31b4d33" prot="public" static="no">
        <type>std::function&lt; void(Eigen::VectorXd &amp;, Eigen::VectorXd &amp;, Eigen::VectorXd &amp;, Eigen::VectorXd &amp;, double, double, <ref refid="numerical_8_h_1a1bd598a94747cd8305e2785b2c056353" kindref="member">symp_derivs</ref>)&gt;</type>
        <definition>using symp_integrator =  std::function&lt;void(Eigen::VectorXd&amp;, Eigen::VectorXd&amp;, Eigen::VectorXd&amp;, Eigen::VectorXd&amp;, double, double, symp_derivs)&gt;</definition>
        <argsstring></argsstring>
        <name>symp_integrator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/numerical.H" line="90" column="1" bodyfile="/home/weinberg/Projects/EXP/include/numerical.H" bodystart="93" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="var">
      <memberdef kind="variable" id="numerical_8_h_1ad37e1b7740e725cb44517fce48e5e3ab" prot="public" static="no" mutable="no">
        <type>const double</type>
        <definition>const double Pi</definition>
        <argsstring></argsstring>
        <name>Pi</name>
        <initializer>= 3.141592653589793</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/numerical.H" line="32" column="14" bodyfile="/home/weinberg/Projects/EXP/include/numerical.H" bodystart="32" bodyend="-1"/>
        <referencedby refid="class_perfect_1ab23c19427f87549d48bc9b4b8eeac716" compoundref="staeckel_8_h" startline="14" endline="23">Perfect::set_Perfect</referencedby>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="numerical_8_h_1a8e2625945f299221024f9f2d4f906fea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double brent</definition>
        <argsstring>(double, double, double, std::function&lt; double(double)&gt;, double, double &amp;)</argsstring>
        <name>brent</name>
        <param>
          <type>double</type>
        </param>
        <param>
          <type>double</type>
        </param>
        <param>
          <type>double</type>
        </param>
        <param>
          <type>std::function&lt; double(double)&gt;</type>
        </param>
        <param>
          <type>double</type>
        </param>
        <param>
          <type>double &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/numerical.H" line="61" column="8" declfile="/home/weinberg/Projects/EXP/include/numerical.H" declline="61" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="numerical_8_h_1abe6a24f97dc6cdcdc907146ac206543e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void bsstep</definition>
        <argsstring>(Eigen::VectorXd &amp;, Eigen::VectorXd &amp;, int, double &amp;, double, double, Eigen::VectorXd &amp;, double &amp;, double &amp;, ode_derivs)</argsstring>
        <name>bsstep</name>
        <param>
          <type>Eigen::VectorXd &amp;</type>
        </param>
        <param>
          <type>Eigen::VectorXd &amp;</type>
        </param>
        <param>
          <type>int</type>
        </param>
        <param>
          <type>double &amp;</type>
        </param>
        <param>
          <type>double</type>
        </param>
        <param>
          <type>double</type>
        </param>
        <param>
          <type>Eigen::VectorXd &amp;</type>
        </param>
        <param>
          <type>double &amp;</type>
        </param>
        <param>
          <type>double &amp;</type>
        </param>
        <param>
          <type><ref refid="numerical_8_h_1a656074dfe6eff519a38be1c6965428ce" kindref="member">ode_derivs</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/numerical.H" line="110" column="6" declfile="/home/weinberg/Projects/EXP/include/numerical.H" declline="110" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="numerical_8_h_1a8072d87f9b56c82ec2b065635277f371" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void constant_step</definition>
        <argsstring>(Eigen::VectorXd &amp;, Eigen::VectorXd &amp;, int, double, ode_derivs, ode_rk)</argsstring>
        <name>constant_step</name>
        <param>
          <type>Eigen::VectorXd &amp;</type>
        </param>
        <param>
          <type>Eigen::VectorXd &amp;</type>
        </param>
        <param>
          <type>int</type>
        </param>
        <param>
          <type>double</type>
        </param>
        <param>
          <type><ref refid="numerical_8_h_1a656074dfe6eff519a38be1c6965428ce" kindref="member">ode_derivs</ref></type>
        </param>
        <param>
          <type><ref refid="numerical_8_h_1a0774b45de49a0704d980661d93332d34" kindref="member">ode_rk</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/numerical.H" line="113" column="6" declfile="/home/weinberg/Projects/EXP/include/numerical.H" declline="113" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="numerical_8_h_1acd8d998ac4ff0c240aae86930af15b3d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void gauleg</definition>
        <argsstring>(double, double, Eigen::VectorXd &amp;, Eigen::VectorXd &amp;, int)</argsstring>
        <name>gauleg</name>
        <param>
          <type>double</type>
        </param>
        <param>
          <type>double</type>
        </param>
        <param>
          <type>Eigen::VectorXd &amp;</type>
        </param>
        <param>
          <type>Eigen::VectorXd &amp;</type>
        </param>
        <param>
          <type>int</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/numerical.H" line="39" column="8" declfile="/home/weinberg/Projects/EXP/include/numerical.H" declline="39" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="numerical_8_h_1a2af23097fe09b9394dd402aa995fa713" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void integrate_ode</definition>
        <argsstring>(Eigen::VectorXd &amp;, double, double, double &amp;, double, int, ode_derivs, ode_integrator)</argsstring>
        <name>integrate_ode</name>
        <param>
          <type>Eigen::VectorXd &amp;</type>
        </param>
        <param>
          <type>double</type>
        </param>
        <param>
          <type>double</type>
        </param>
        <param>
          <type>double &amp;</type>
        </param>
        <param>
          <type>double</type>
        </param>
        <param>
          <type>int</type>
        </param>
        <param>
          <type><ref refid="numerical_8_h_1a656074dfe6eff519a38be1c6965428ce" kindref="member">ode_derivs</ref></type>
        </param>
        <param>
          <type><ref refid="numerical_8_h_1a0aefe47f5a0d9a3f079c32493f0f7c78" kindref="member">ode_integrator</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/numerical.H" line="97" column="6" declfile="/home/weinberg/Projects/EXP/include/numerical.H" declline="97" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="numerical_8_h_1abe0aaee06ed9541528c0a5a31ae3609b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void locate</definition>
        <argsstring>(Eigen::VectorXd &amp;, int, double, int *)</argsstring>
        <name>locate</name>
        <param>
          <type>Eigen::VectorXd &amp;</type>
        </param>
        <param>
          <type>int</type>
        </param>
        <param>
          <type>double</type>
        </param>
        <param>
          <type>int *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/numerical.H" line="125" column="6" declfile="/home/weinberg/Projects/EXP/include/numerical.H" declline="125" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="numerical_8_h_1a2ab3fa38c1aa72dada27c5f2b33bbc52" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mnbrak</definition>
        <argsstring>(Eigen::VectorXd &amp;, Eigen::VectorXd &amp;, Eigen::VectorXd &amp;, Eigen::VectorXd &amp;, Eigen::VectorXd &amp;, Eigen::VectorXd &amp;, std::function&lt; double(double)&gt;)</argsstring>
        <name>mnbrak</name>
        <param>
          <type>Eigen::VectorXd &amp;</type>
        </param>
        <param>
          <type>Eigen::VectorXd &amp;</type>
        </param>
        <param>
          <type>Eigen::VectorXd &amp;</type>
        </param>
        <param>
          <type>Eigen::VectorXd &amp;</type>
        </param>
        <param>
          <type>Eigen::VectorXd &amp;</type>
        </param>
        <param>
          <type>Eigen::VectorXd &amp;</type>
        </param>
        <param>
          <type>std::function&lt; double(double)&gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/numerical.H" line="63" column="6" declfile="/home/weinberg/Projects/EXP/include/numerical.H" declline="63" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="numerical_8_h_1a27cd6979e73628e5e93356a381ad0cf8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void onestep</definition>
        <argsstring>(Eigen::VectorXd &amp;, double &amp;, int, double &amp;, double, ode_derivs, ode_integrator)</argsstring>
        <name>onestep</name>
        <param>
          <type>Eigen::VectorXd &amp;</type>
        </param>
        <param>
          <type>double &amp;</type>
        </param>
        <param>
          <type>int</type>
        </param>
        <param>
          <type>double &amp;</type>
        </param>
        <param>
          <type>double</type>
        </param>
        <param>
          <type><ref refid="numerical_8_h_1a656074dfe6eff519a38be1c6965428ce" kindref="member">ode_derivs</ref></type>
        </param>
        <param>
          <type><ref refid="numerical_8_h_1a0aefe47f5a0d9a3f079c32493f0f7c78" kindref="member">ode_integrator</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/numerical.H" line="101" column="6" declfile="/home/weinberg/Projects/EXP/include/numerical.H" declline="101" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="numerical_8_h_1a36a84e080649693f10597c8e7246dde8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double poly</definition>
        <argsstring>(double, int, double *)</argsstring>
        <name>poly</name>
        <param>
          <type>double</type>
        </param>
        <param>
          <type>int</type>
        </param>
        <param>
          <type>double *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/numerical.H" line="35" column="8" declfile="/home/weinberg/Projects/EXP/include/numerical.H" declline="35" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="numerical_8_h_1a554a309b7cf0bd70273972eca533789a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double qadapt</definition>
        <argsstring>(double, double, std::function&lt; double(double)&gt;, double)</argsstring>
        <name>qadapt</name>
        <param>
          <type>double</type>
        </param>
        <param>
          <type>double</type>
        </param>
        <param>
          <type>std::function&lt; double(double)&gt;</type>
        </param>
        <param>
          <type>double</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/numerical.H" line="40" column="8" declfile="/home/weinberg/Projects/EXP/include/numerical.H" declline="40" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="numerical_8_h_1a1bbf6ae4c3039dbe9885e6462d413887" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double qadapt2d</definition>
        <argsstring>(double, double, double, double, std::function&lt; double(double, double)&gt;, double)</argsstring>
        <name>qadapt2d</name>
        <param>
          <type>double</type>
        </param>
        <param>
          <type>double</type>
        </param>
        <param>
          <type>double</type>
        </param>
        <param>
          <type>double</type>
        </param>
        <param>
          <type>std::function&lt; double(double, double)&gt;</type>
        </param>
        <param>
          <type>double</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/numerical.H" line="41" column="8" declfile="/home/weinberg/Projects/EXP/include/numerical.H" declline="41" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="numerical_8_h_1a1f7d825209d0f55b93b1faddd06142ce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rk2qc</definition>
        <argsstring>(Eigen::VectorXd &amp;, Eigen::VectorXd &amp;, int, double &amp;, double, double, Eigen::VectorXd &amp;, double &amp;, double &amp;, ode_derivs)</argsstring>
        <name>rk2qc</name>
        <param>
          <type>Eigen::VectorXd &amp;</type>
        </param>
        <param>
          <type>Eigen::VectorXd &amp;</type>
        </param>
        <param>
          <type>int</type>
        </param>
        <param>
          <type>double &amp;</type>
        </param>
        <param>
          <type>double</type>
        </param>
        <param>
          <type>double</type>
        </param>
        <param>
          <type>Eigen::VectorXd &amp;</type>
        </param>
        <param>
          <type>double &amp;</type>
        </param>
        <param>
          <type>double &amp;</type>
        </param>
        <param>
          <type><ref refid="numerical_8_h_1a656074dfe6eff519a38be1c6965428ce" kindref="member">ode_derivs</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/numerical.H" line="107" column="6" declfile="/home/weinberg/Projects/EXP/include/numerical.H" declline="107" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="numerical_8_h_1aa98b424f7b9cddea4e722ed7392a7979" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rk4</definition>
        <argsstring>(Eigen::VectorXd &amp;, Eigen::VectorXd &amp;, int, double, double, Eigen::VectorXd &amp;, ode_derivs)</argsstring>
        <name>rk4</name>
        <param>
          <type>Eigen::VectorXd &amp;</type>
        </param>
        <param>
          <type>Eigen::VectorXd &amp;</type>
        </param>
        <param>
          <type>int</type>
        </param>
        <param>
          <type>double</type>
        </param>
        <param>
          <type>double</type>
        </param>
        <param>
          <type>Eigen::VectorXd &amp;</type>
        </param>
        <param>
          <type><ref refid="numerical_8_h_1a656074dfe6eff519a38be1c6965428ce" kindref="member">ode_derivs</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/numerical.H" line="116" column="6" declfile="/home/weinberg/Projects/EXP/include/numerical.H" declline="116" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="numerical_8_h_1a7332266cbf785af27b007eb44638c34d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rkqc</definition>
        <argsstring>(Eigen::VectorXd &amp;, Eigen::VectorXd &amp;, int, double &amp;, double, double, Eigen::VectorXd &amp;, double &amp;, double &amp;, ode_derivs)</argsstring>
        <name>rkqc</name>
        <param>
          <type>Eigen::VectorXd &amp;</type>
        </param>
        <param>
          <type>Eigen::VectorXd &amp;</type>
        </param>
        <param>
          <type>int</type>
        </param>
        <param>
          <type>double &amp;</type>
        </param>
        <param>
          <type>double</type>
        </param>
        <param>
          <type>double</type>
        </param>
        <param>
          <type>Eigen::VectorXd &amp;</type>
        </param>
        <param>
          <type>double &amp;</type>
        </param>
        <param>
          <type>double &amp;</type>
        </param>
        <param>
          <type><ref refid="numerical_8_h_1a656074dfe6eff519a38be1c6965428ce" kindref="member">ode_derivs</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/numerical.H" line="104" column="6" declfile="/home/weinberg/Projects/EXP/include/numerical.H" declline="104" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="numerical_8_h_1a19092d3aba79e258689bf6a710346a12" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double rtbis</definition>
        <argsstring>(std::function&lt; double(double)&gt;, double, double, double)</argsstring>
        <name>rtbis</name>
        <param>
          <type>std::function&lt; double(double)&gt;</type>
        </param>
        <param>
          <type>double</type>
        </param>
        <param>
          <type>double</type>
        </param>
        <param>
          <type>double</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/numerical.H" line="50" column="8" declfile="/home/weinberg/Projects/EXP/include/numerical.H" declline="50" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="numerical_8_h_1a1b77cef08af5791845bf6ef2a2149cb6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double rtsafe</definition>
        <argsstring>(std::function&lt; void(double, double &amp;, double &amp;)&gt;, double, double, double)</argsstring>
        <name>rtsafe</name>
        <param>
          <type>std::function&lt; void(double, double &amp;, double &amp;)&gt;</type>
        </param>
        <param>
          <type>double</type>
        </param>
        <param>
          <type>double</type>
        </param>
        <param>
          <type>double</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/numerical.H" line="52" column="8" declfile="/home/weinberg/Projects/EXP/include/numerical.H" declline="52" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="numerical_8_h_1a5dccc4cf3d8d1ea1051c0b6d6ab5737e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void sia4</definition>
        <argsstring>(Eigen::VectorXd &amp;, Eigen::VectorXd &amp;, Eigen::VectorXd &amp;, Eigen::VectorXd &amp;, double, double, symp_derivs)</argsstring>
        <name>sia4</name>
        <param>
          <type>Eigen::VectorXd &amp;</type>
        </param>
        <param>
          <type>Eigen::VectorXd &amp;</type>
        </param>
        <param>
          <type>Eigen::VectorXd &amp;</type>
        </param>
        <param>
          <type>Eigen::VectorXd &amp;</type>
        </param>
        <param>
          <type>double</type>
        </param>
        <param>
          <type>double</type>
        </param>
        <param>
          <type><ref refid="numerical_8_h_1a1bd598a94747cd8305e2785b2c056353" kindref="member">symp_derivs</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/numerical.H" line="119" column="6" declfile="/home/weinberg/Projects/EXP/include/numerical.H" declline="119" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="numerical_8_h_1abcb9dca4b635c697549f0e862d3b264e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int zbrac</definition>
        <argsstring>(std::function&lt; double(double)&gt;, Eigen::VectorXd &amp;, Eigen::VectorXd &amp;)</argsstring>
        <name>zbrac</name>
        <param>
          <type>std::function&lt; double(double)&gt;</type>
        </param>
        <param>
          <type>Eigen::VectorXd &amp;</type>
        </param>
        <param>
          <type>Eigen::VectorXd &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/numerical.H" line="54" column="5" declfile="/home/weinberg/Projects/EXP/include/numerical.H" declline="54" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="numerical_8_h_1a52b35977d5a80f67663a86d89f38d769" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double zbrent</definition>
        <argsstring>(std::function&lt; double(double)&gt;, double, double, double)</argsstring>
        <name>zbrent</name>
        <param>
          <type>std::function&lt; double(double)&gt;</type>
        </param>
        <param>
          <type>double</type>
        </param>
        <param>
          <type>double</type>
        </param>
        <param>
          <type>double</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/weinberg/Projects/EXP/include/numerical.H" line="48" column="8" declfile="/home/weinberg/Projects/EXP/include/numerical.H" declline="48" declcolumn="8"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#ifndef<sp/>_numerical_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_numerical_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;functional&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;Eigen/Eigen&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/>some<sp/>simple<sp/>macros<sp/>(some<sp/>very<sp/>old<sp/>stuff,<sp/>not<sp/>yet<sp/>replaced)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>MAX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10" refid="numerical_8_h_1aff9931d7524c88e07743af6535b20761" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MAX(X,<sp/>Y)<sp/>(((X)<sp/>&gt;<sp/>(Y))<sp/>?<sp/>(X)<sp/>:<sp/>(Y))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>MIN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13" refid="numerical_8_h_1ad2f3678bf5eae3684fc497130b946eae" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MIN(X,<sp/>Y)<sp/>(((X)<sp/>&lt;<sp/>(Y))<sp/>?<sp/>(X)<sp/>:<sp/>(Y))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16" refid="numerical_8_h_1a97aa4af1a3e9105a48c9fe831b37d9ec" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FLOAT(X)<sp/><sp/>((float)<sp/>(X))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17" refid="numerical_8_h_1a39488788cf0a27cf6e39f97a05383073" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOUBLE(X)<sp/>((double)<sp/>(X))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18" refid="numerical_8_h_1a2eb03319e5ccdc1a14b73a7d8b1724de" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SQR(X)<sp/>((X)*(X))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>TINY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20" refid="numerical_8_h_1acf1c38f71f39386356edb151a131ad11" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TINY<sp/>1.e-10</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22" refid="numerical_8_h_1a90bdd4bad125296a08c222d412674ed3" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Sign(X)<sp/>(((X)&gt;0)<sp/>?<sp/>(1.0)<sp/>:<sp/>(-1.0))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="comment">//<sp/>special<sp/>functions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="comment">//<sp/>double<sp/>BesselJ(int,<sp/>double);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="comment">//<sp/>double<sp/>BesselI(int,<sp/>double);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="comment">//<sp/>double<sp/>BesselK(int,<sp/>double);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="comment">//<sp/>double<sp/>gammln(double);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32" refid="numerical_8_h_1ad37e1b7740e725cb44517fce48e5e3ab" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="numerical_8_h_1ad37e1b7740e725cb44517fce48e5e3ab" kindref="member">Pi</ref><sp/>=<sp/>3.141592653589793;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35" refid="numerical_8_h_1a36a84e080649693f10597c8e7246dde8" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="numerical_8_h_1a36a84e080649693f10597c8e7246dde8" kindref="member">poly</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*);</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="comment">//<sp/>numerical<sp/>quadrature</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39" refid="numerical_8_h_1acd8d998ac4ff0c240aae86930af15b3d" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><ref refid="numerical_8_h_1acd8d998ac4ff0c240aae86930af15b3d" kindref="member">gauleg</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">,<sp/>Eigen::VectorXd&amp;,<sp/>Eigen::VectorXd&amp;,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="40" refid="numerical_8_h_1a554a309b7cf0bd70273972eca533789a" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="numerical_8_h_1a554a309b7cf0bd70273972eca533789a" kindref="member">qadapt</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">,<sp/>std::function&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)&gt;,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="41" refid="numerical_8_h_1a1bbf6ae4c3039dbe9885e6462d413887" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="numerical_8_h_1a1bbf6ae4c3039dbe9885e6462d413887" kindref="member">qadapt2d</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::function&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)&gt;,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="comment">//<sp/>root<sp/>finding</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48" refid="numerical_8_h_1a52b35977d5a80f67663a86d89f38d769" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="expand_8_h_1a6e0f498dcf0bee81ec1da49b80fcd0ed" kindref="member">zbrent</ref>(std::function&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)&gt;,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50" refid="numerical_8_h_1a19092d3aba79e258689bf6a710346a12" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="numerical_8_h_1a19092d3aba79e258689bf6a710346a12" kindref="member">rtbis</ref>(std::function&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)&gt;,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52" refid="numerical_8_h_1a1b77cef08af5791845bf6ef2a2149cb6" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="numerical_8_h_1a1b77cef08af5791845bf6ef2a2149cb6" kindref="member">rtsafe</ref>(std::function&lt;</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&amp;,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&amp;)&gt;,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54" refid="numerical_8_h_1abcb9dca4b635c697549f0e862d3b264e" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="numerical_8_h_1abcb9dca4b635c697549f0e862d3b264e" kindref="member">zbrac</ref>(std::function&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)&gt;,<sp/>Eigen::VectorXd&amp;,<sp/>Eigen::VectorXd&amp;);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="comment">//<sp/>1D<sp/>minimization</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61" refid="numerical_8_h_1a8e2625945f299221024f9f2d4f906fea" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="numerical_8_h_1a8e2625945f299221024f9f2d4f906fea" kindref="member">brent</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">,<sp/>std::function&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)&gt;,</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&amp;);</highlight></codeline>
<codeline lineno="63" refid="numerical_8_h_1a2ab3fa38c1aa72dada27c5f2b33bbc52" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="numerical_8_h_1a2ab3fa38c1aa72dada27c5f2b33bbc52" kindref="member">mnbrak</ref>(Eigen::VectorXd&amp;,<sp/>Eigen::VectorXd&amp;,<sp/>Eigen::VectorXd&amp;,</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::VectorXd&amp;,<sp/>Eigen::VectorXd&amp;,<sp/></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::VectorXd&amp;,<sp/>std::function&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)&gt;);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="comment">//<sp/>ODE<sp/>solvers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="comment">//<sp/>first,<sp/>some<sp/>function<sp/>wrapper<sp/>typedefs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73" refid="numerical_8_h_1a656074dfe6eff519a38be1c6965428ce" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="numerical_8_h_1a656074dfe6eff519a38be1c6965428ce" kindref="member">ode_derivs</ref><sp/>=</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/>std::function&lt;void(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">,<sp/>Eigen::VectorXd&amp;,<sp/>Eigen::VectorXd&amp;)&gt;;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76" refid="numerical_8_h_1a0aefe47f5a0d9a3f079c32493f0f7c78" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="numerical_8_h_1a0aefe47f5a0d9a3f079c32493f0f7c78" kindref="member">ode_integrator</ref><sp/>=</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/>std::function&lt;void(Eigen::VectorXd&amp;,<sp/>Eigen::VectorXd&amp;,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&amp;,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">,<sp/>Eigen::VectorXd&amp;,</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&amp;,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&amp;,<sp/><ref refid="numerical_8_h_1a656074dfe6eff519a38be1c6965428ce" kindref="member">ode_derivs</ref>)&gt;;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81" refid="numerical_8_h_1a0774b45de49a0704d980661d93332d34" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="numerical_8_h_1a0774b45de49a0704d980661d93332d34" kindref="member">ode_rk</ref><sp/>=</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/>std::function&lt;void(Eigen::VectorXd&amp;,<sp/>Eigen::VectorXd&amp;,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">,<sp/></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::VectorXd&amp;,<sp/><ref refid="numerical_8_h_1a656074dfe6eff519a38be1c6965428ce" kindref="member">ode_derivs</ref>)&gt;;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86" refid="numerical_8_h_1a1bd598a94747cd8305e2785b2c056353" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="numerical_8_h_1a1bd598a94747cd8305e2785b2c056353" kindref="member">symp_derivs</ref><sp/>=</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/>std::function&lt;void(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">,<sp/>Eigen::VectorXd&amp;,<sp/>Eigen::VectorXd&amp;,</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::VectorXd&amp;)&gt;;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90" refid="numerical_8_h_1aad116aeeb2c95bb00b91cb98b31b4d33" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="numerical_8_h_1aad116aeeb2c95bb00b91cb98b31b4d33" kindref="member">symp_integrator</ref><sp/>=</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/>std::function&lt;void(Eigen::VectorXd&amp;,<sp/>Eigen::VectorXd&amp;,</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::VectorXd&amp;,<sp/>Eigen::VectorXd&amp;,<sp/></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">,<sp/><ref refid="numerical_8_h_1a1bd598a94747cd8305e2785b2c056353" kindref="member">symp_derivs</ref>)&gt;;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="comment">//<sp/>prototypes<sp/>for<sp/>ODE<sp/>solvers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97" refid="numerical_8_h_1a2af23097fe09b9394dd402aa995fa713" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="numerical_8_h_1a2af23097fe09b9394dd402aa995fa713" kindref="member">integrate_ode</ref>(Eigen::VectorXd&amp;,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&amp;,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="numerical_8_h_1a656074dfe6eff519a38be1c6965428ce" kindref="member">ode_derivs</ref>,<sp/><ref refid="numerical_8_h_1a0aefe47f5a0d9a3f079c32493f0f7c78" kindref="member">ode_integrator</ref>);</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101" refid="numerical_8_h_1a27cd6979e73628e5e93356a381ad0cf8" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="numerical_8_h_1a27cd6979e73628e5e93356a381ad0cf8" kindref="member">onestep</ref>(Eigen::VectorXd&amp;,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&amp;,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&amp;,</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">,<sp/><ref refid="numerical_8_h_1a656074dfe6eff519a38be1c6965428ce" kindref="member">ode_derivs</ref>,<sp/><ref refid="numerical_8_h_1a0aefe47f5a0d9a3f079c32493f0f7c78" kindref="member">ode_integrator</ref>);</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="104" refid="numerical_8_h_1a7332266cbf785af27b007eb44638c34d" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="numerical_8_h_1a7332266cbf785af27b007eb44638c34d" kindref="member">rkqc</ref>(Eigen::VectorXd&amp;,<sp/>Eigen::VectorXd&amp;,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&amp;,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">,<sp/></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::VectorXd&amp;,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&amp;,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&amp;,<sp/><ref refid="numerical_8_h_1a656074dfe6eff519a38be1c6965428ce" kindref="member">ode_derivs</ref>);</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="107" refid="numerical_8_h_1a1f7d825209d0f55b93b1faddd06142ce" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="numerical_8_h_1a1f7d825209d0f55b93b1faddd06142ce" kindref="member">rk2qc</ref><sp/>(Eigen::VectorXd&amp;,<sp/>Eigen::VectorXd&amp;,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&amp;,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">,<sp/></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::VectorXd&amp;,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&amp;,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&amp;,<sp/><ref refid="numerical_8_h_1a656074dfe6eff519a38be1c6965428ce" kindref="member">ode_derivs</ref>);</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110" refid="numerical_8_h_1abe6a24f97dc6cdcdc907146ac206543e" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="numerical_8_h_1abe6a24f97dc6cdcdc907146ac206543e" kindref="member">bsstep</ref><sp/>(Eigen::VectorXd&amp;,<sp/>Eigen::VectorXd&amp;,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&amp;,<sp/></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">,<sp/>Eigen::VectorXd&amp;,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&amp;,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&amp;,<sp/><ref refid="numerical_8_h_1a656074dfe6eff519a38be1c6965428ce" kindref="member">ode_derivs</ref>);</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113" refid="numerical_8_h_1a8072d87f9b56c82ec2b065635277f371" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="numerical_8_h_1a8072d87f9b56c82ec2b065635277f371" kindref="member">constant_step</ref><sp/>(Eigen::VectorXd&amp;,<sp/>Eigen::VectorXd&amp;,</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">,<sp/><ref refid="numerical_8_h_1a656074dfe6eff519a38be1c6965428ce" kindref="member">ode_derivs</ref>,<sp/><ref refid="numerical_8_h_1a0774b45de49a0704d980661d93332d34" kindref="member">ode_rk</ref>);</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116" refid="numerical_8_h_1aa98b424f7b9cddea4e722ed7392a7979" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="numerical_8_h_1aa98b424f7b9cddea4e722ed7392a7979" kindref="member">rk4</ref>(Eigen::VectorXd&amp;,<sp/>Eigen::VectorXd&amp;,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::VectorXd&amp;,<sp/><ref refid="numerical_8_h_1a656074dfe6eff519a38be1c6965428ce" kindref="member">ode_derivs</ref>);</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119" refid="numerical_8_h_1a5dccc4cf3d8d1ea1051c0b6d6ab5737e" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="numerical_8_h_1a5dccc4cf3d8d1ea1051c0b6d6ab5737e" kindref="member">sia4</ref>(Eigen::VectorXd&amp;,<sp/>Eigen::VectorXd&amp;,<sp/>Eigen::VectorXd&amp;,</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::VectorXd&amp;,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">,<sp/><ref refid="numerical_8_h_1a1bd598a94747cd8305e2785b2c056353" kindref="member">symp_derivs</ref>);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight><highlight class="comment">//<sp/>interpolation<sp/>stuff</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125" refid="numerical_8_h_1abe0aaee06ed9541528c0a5a31ae3609b" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="expand_8_h_1af2f4ae87f03750cb9cca117d0cfcf2fb" kindref="member">locate</ref><sp/>(Eigen::VectorXd&amp;,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*);</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="/home/weinberg/Projects/EXP/include/numerical.H"/>
  </compounddef>
</doxygen>
